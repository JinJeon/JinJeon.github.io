<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-GB"><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en-GB" /><updated>2022-01-11T05:38:51+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">JINJEONIMUM</title><subtitle></subtitle><author><name>JinJeon</name></author><entry><title type="html">LINKED LIST</title><link href="http://localhost:4000/dev/2022/01/10/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8/" rel="alternate" type="text/html" title="LINKED LIST" /><published>2022-01-10T00:00:00+09:00</published><updated>2022-01-10T00:00:00+09:00</updated><id>http://localhost:4000/dev/2022/01/10/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8</id><content type="html" xml:base="http://localhost:4000/dev/2022/01/10/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8/">&lt;h1 id=&quot;1-배열과-연결리스트의-장단점-비교&quot;&gt;1. 배열과 연결리스트의 장단점 비교&lt;/h1&gt;

&lt;h2 id=&quot;1-1-배열&quot;&gt;1-1. 배열&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;장점 : 랜덤 엑세스가 빠르다.&lt;/li&gt;
  &lt;li&gt;단점 : 메모리 사용이 비효율적이다. 배열 내 데이터 이동 및 재구성이 어렵다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-2-연결리스트&quot;&gt;1-2. 연결리스트&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;장점 : 동적 메모리 사용이 가능하다. 메모리 사용이 효율적이다. 대용량 데이터 처리에 적합하다.&lt;/li&gt;
  &lt;li&gt;단점 : 특정 위치 데이터 검색 시 느리다. 메모리의 추가적인 사용이 필요하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;2-노드&quot;&gt;2. 노드&lt;/h1&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/image/22_01/10/자료구조 5.png&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;&quot; /&gt;
  
&lt;/figure&gt;

&lt;p&gt;연결리스트는 ‘노드’라는 객체로 이루어져 있다.&lt;br /&gt;
노드는 저장할 공간과 다음 주소를 가리킬 공간으로 나뉘게 된다.&lt;br /&gt;
입력 정보를 위의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DATA&lt;/code&gt; 영역에 담고 노드가 추가될 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NEXT ADDRESS&lt;/code&gt;를 이용해 다음 노드와 연결하게 된다.&lt;/p&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/image/22_01/10/자료구조 6.png&quot; alt=&quot;&quot; width=&quot;75%&quot; height=&quot;&quot; /&gt;
  
&lt;/figure&gt;

&lt;p&gt;각 노드는 연속된 공간이 아닌 &lt;strong&gt;메모리의 여러 부분에 분포&lt;/strong&gt;되어 있다.&lt;br /&gt;
노드마다 &lt;strong&gt;NEXT ADDRESS를 저장&lt;/strong&gt;해 다음 노드로 갈 수 있다.&lt;br /&gt;
&lt;strong&gt;마지막 노드는 다음 주소가 NULL&lt;/strong&gt;로 표시된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;3-연결리스트-구현&quot;&gt;3. 연결리스트 구현&lt;/h1&gt;

&lt;p&gt;‘초기화(init)’, ‘삽입(insert)’, ‘삭제(remove)’를 진행할 수 있는 함수가 필요하다.&lt;/p&gt;

&lt;h2 id=&quot;3-1-초기화&quot;&gt;3-1. 초기화&lt;/h2&gt;

&lt;p&gt;처음에 노드를 생성하는 과정을 말한다.&lt;br /&gt;
노드에 접근하기 위해서 맨 처음 노드 주소를 가리킬 노드가 필요하다.(HEAD)&lt;/p&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/image/22_01/10/자료구조 7.png&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;&quot; /&gt;
  
&lt;/figure&gt;

&lt;h2 id=&quot;3-2-삽입&quot;&gt;3-2. 삽입&lt;/h2&gt;

&lt;h3 id=&quot;a-앞에-삽입하는-경우&quot;&gt;A. 앞에 삽입하는 경우&lt;/h3&gt;

&lt;p&gt;HEAD의 뒤에서 처리가 이루어지게 된다.
&lt;strong&gt;’새로운 노드의 NEXT → 현재 HEAD의 NEXT’&lt;br /&gt;
’HEAD의 NEXT → 새로운 노드의 DATA’&lt;/strong&gt;&lt;br /&gt;
의 형태로 이루어지게 되며 아래의 그림과 같은 방식이 된다.&lt;/p&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/image/22_01/10/자료구조 8.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;&quot; /&gt;
  
&lt;/figure&gt;

&lt;h3 id=&quot;b-뒤에-삽입하는-경우&quot;&gt;B. 뒤에 삽입하는 경우&lt;/h3&gt;

&lt;p&gt;앞의 과정과 반대로, HEAD대신 TAIL을 사용한다.&lt;br /&gt;
&lt;strong&gt;’새로운 노드의 NEXT → NULL’,&lt;br /&gt;
’TAIL의 NEXT의 NEXT’ → ‘새로운 노드의 DATA’,
’TAIL의 NEXT → 새로운 노드의 DATA’&lt;/strong&gt;&lt;br /&gt;
의 형태로 이루어지며, 아래의 그림과 같이 된다.&lt;/p&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/image/22_01/10/자료구조 9.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;&quot; /&gt;
  
&lt;/figure&gt;

&lt;h3 id=&quot;c-원하는-위치에-삽입하는-경우&quot;&gt;C. 원하는 위치에 삽입하는 경우&lt;/h3&gt;

&lt;p&gt;특정 위치에 삽입할 경우(여기서는 FIRST와 SECOND사이), 삽입할 위치를 찾는 노드(LOCATION)가 먼저 필요하다.&lt;br /&gt;
이전에는 HEAD, TAIL과 같은 위치가 있는 노드가 있었지만, 지금은 없는 경우이므로 직접적인 설정이 필요하다.&lt;br /&gt;
&lt;strong&gt;’LOCATION의 NEXT → FIRST의 DATA’,&lt;br /&gt;
’새로운 노드의 NEXT → SECOND의 DATA’,&lt;br /&gt;
’FIRST의 NEXT → 새로운 노드의 DATA’&lt;/strong&gt;&lt;br /&gt;
의 형태로 이루어진다.&lt;/p&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/image/22_01/10/자료구조 10.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;&quot; /&gt;
  
&lt;/figure&gt;

&lt;h2 id=&quot;3-3-삭제&quot;&gt;3-3. 삭제&lt;/h2&gt;

&lt;p&gt;원하는 위치에 삽입하는 경우와 비슷하다.&lt;br /&gt;
그러나, 삭제할 노드(DELETE)의 전 ∙ 후를 연결해야 하기에 새로운 노드(PRE)가 필요하다.&lt;br /&gt;
&lt;strong&gt;’LOCATION의 NEXT → DELETE의 DATA’,&lt;br /&gt;
’PRE의 NEXT의 NEXT → DELETE의 NEXT’,&lt;br /&gt;
’DELETE를 삭제’&lt;/strong&gt;&lt;br /&gt;
의 순서로 이루어지며 아래 그림의 형태와 같다.&lt;/p&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/image/22_01/10/자료구조 11.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;&quot; /&gt;
  
&lt;/figure&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;링크&quot;&gt;링크&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;연결리스트 안내&lt;br /&gt;
&lt;a href=&quot;https://sycho-lego.tistory.com/17&quot;&gt;https://sycho-lego.tistory.com/17&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>JinJeon</name></author><category term="DEV" /><summary type="html">1. 배열과 연결리스트의 장단점 비교 1-1. 배열 장점 : 랜덤 엑세스가 빠르다. 단점 : 메모리 사용이 비효율적이다. 배열 내 데이터 이동 및 재구성이 어렵다. 1-2. 연결리스트 장점 : 동적 메모리 사용이 가능하다. 메모리 사용이 효율적이다. 대용량 데이터 처리에 적합하다. 단점 : 특정 위치 데이터 검색 시 느리다. 메모리의 추가적인 사용이 필요하다. 2. 노드 연결리스트는 ‘노드’라는 객체로 이루어져 있다. 노드는 저장할 공간과 다음 주소를 가리킬 공간으로 나뉘게 된다. 입력 정보를 위의 DATA 영역에 담고 노드가 추가될 때 NEXT ADDRESS를 이용해 다음 노드와 연결하게 된다. 각 노드는 연속된 공간이 아닌 메모리의 여러 부분에 분포되어 있다. 노드마다 NEXT ADDRESS를 저장해 다음 노드로 갈 수 있다. 마지막 노드는 다음 주소가 NULL로 표시된다. 3. 연결리스트 구현 ‘초기화(init)’, ‘삽입(insert)’, ‘삭제(remove)’를 진행할 수 있는 함수가 필요하다. 3-1. 초기화 처음에 노드를 생성하는 과정을 말한다. 노드에 접근하기 위해서 맨 처음 노드 주소를 가리킬 노드가 필요하다.(HEAD) 3-2. 삽입 A. 앞에 삽입하는 경우 HEAD의 뒤에서 처리가 이루어지게 된다. ’새로운 노드의 NEXT → 현재 HEAD의 NEXT’ ’HEAD의 NEXT → 새로운 노드의 DATA’ 의 형태로 이루어지게 되며 아래의 그림과 같은 방식이 된다. B. 뒤에 삽입하는 경우 앞의 과정과 반대로, HEAD대신 TAIL을 사용한다. ’새로운 노드의 NEXT → NULL’, ’TAIL의 NEXT의 NEXT’ → ‘새로운 노드의 DATA’, ’TAIL의 NEXT → 새로운 노드의 DATA’ 의 형태로 이루어지며, 아래의 그림과 같이 된다. C. 원하는 위치에 삽입하는 경우 특정 위치에 삽입할 경우(여기서는 FIRST와 SECOND사이), 삽입할 위치를 찾는 노드(LOCATION)가 먼저 필요하다. 이전에는 HEAD, TAIL과 같은 위치가 있는 노드가 있었지만, 지금은 없는 경우이므로 직접적인 설정이 필요하다. ’LOCATION의 NEXT → FIRST의 DATA’, ’새로운 노드의 NEXT → SECOND의 DATA’, ’FIRST의 NEXT → 새로운 노드의 DATA’ 의 형태로 이루어진다. 3-3. 삭제 원하는 위치에 삽입하는 경우와 비슷하다. 그러나, 삭제할 노드(DELETE)의 전 ∙ 후를 연결해야 하기에 새로운 노드(PRE)가 필요하다. ’LOCATION의 NEXT → DELETE의 DATA’, ’PRE의 NEXT의 NEXT → DELETE의 NEXT’, ’DELETE를 삭제’ 의 순서로 이루어지며 아래 그림의 형태와 같다. 링크 연결리스트 안내 https://sycho-lego.tistory.com/17</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/default-social-image.png" /><media:content medium="image" url="http://localhost:4000/assets/default-social-image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">DATA CONSTRUCTOR</title><link href="http://localhost:4000/dev/2022/01/10/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/" rel="alternate" type="text/html" title="DATA CONSTRUCTOR" /><published>2022-01-10T00:00:00+09:00</published><updated>2022-01-10T00:00:00+09:00</updated><id>http://localhost:4000/dev/2022/01/10/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0</id><content type="html" xml:base="http://localhost:4000/dev/2022/01/10/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/">&lt;p&gt;여기서는 간략하게 비선형 구조, 선형 구조로 나누어 살펴본다.&lt;br /&gt;
추후에 더 자세한 정리가 이루어지면 링크를 걸어놓을 예정이다.&lt;/p&gt;

&lt;h1 id=&quot;1-비선형-구조&quot;&gt;1. 비선형 구조&lt;/h1&gt;

&lt;p&gt;하나의 데이터 안에 여러 개의 자료가 존재할 수 있는 것을 말한다.&lt;/p&gt;

&lt;h2 id=&quot;a-트리&quot;&gt;A. 트리&lt;/h2&gt;

&lt;p&gt;정점과 선분을 이용해 &lt;strong&gt;사이클을 이루지 않도록 구성&lt;/strong&gt;한 그래프 형태로, 방향성이 존재해 부모 ∙ 자식 계층 구조가 명확하다.&lt;/p&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/image/22_01/10/자료구조.png&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;&quot; /&gt;
  
&lt;/figure&gt;

&lt;h2 id=&quot;b-그래프&quot;&gt;B. 그래프&lt;/h2&gt;

&lt;p&gt;정점, 선분을 이용해 &lt;strong&gt;사이클을 이루도록 구성&lt;/strong&gt;한 것으로, 순환이 가능하다.&lt;/p&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/image/22_01/10/자료구조 1.png&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;&quot; /&gt;
  
&lt;/figure&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;2-선형-구조&quot;&gt;2. 선형 구조&lt;/h1&gt;

&lt;p&gt;자료를 구성하는 데이터를 순차적으로 나열한 형태를 말한다.&lt;br /&gt;
종류로는 배열(선형 리스트), 연결 리스트, 스택, 큐, 테크 등이 있다.&lt;br /&gt;
포인터 등을 사용해 자료를 연결하면 그 결과가 일직선 상에 표시되거나 하나의 원상에 표시된다.&lt;/p&gt;

&lt;h2 id=&quot;a-배열-array&quot;&gt;A. 배열 (Array)&lt;/h2&gt;

&lt;p&gt;인덱스를 갖고 있으며, 순차적으로 데이터가 삽입, 삭제될 수 있는 구조이다.&lt;br /&gt;
데이터의 순차적 삽입, 삭제 시 가장 효과적이다.&lt;br /&gt;
&lt;strong&gt;인덱스를 사용해 검색이 빠르다&lt;/strong&gt;는 장점이 있지만, &lt;strong&gt;중간 삽입 ∙ 삭제가 어렵다&lt;/strong&gt;는 단점이 있다.&lt;/p&gt;

&lt;h2 id=&quot;b-연결리스트-linked-list&quot;&gt;&lt;a href=&quot;https://jinjeon.github.io/dev/2022/01/10/연결리스트/&quot;&gt;B. 연결리스트 (Linked List)&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;자료 항목 순서에 따라 노드의 포인터 부분을 이용해 서로 연결한 구조이다.&lt;br /&gt;
 노드의 삽입, 삭제 작업이 용이하며, 기억 공간이 연속적으로 놓이지 않아도 저장이 가능하다.&lt;br /&gt;
 &lt;strong&gt;중간 삽입 ∙ 삭제가 빠르고 용이하다&lt;/strong&gt;는 장점이 있지만, &lt;strong&gt;접근 속도가 느리며 중간 노드 연결이 끊어질 시 다음 노드를 찾기 어렵다&lt;/strong&gt;는 단점이 있다.&lt;/p&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/image/22_01/10/자료구조 2.png&quot; alt=&quot;&quot; width=&quot;75%&quot; height=&quot;&quot; /&gt;
  
&lt;/figure&gt;

&lt;h2 id=&quot;c-스택-stack&quot;&gt;C. 스택 (Stack)&lt;/h2&gt;

&lt;p&gt;리스트의 한 쪽 끝으로만 자료 삽입, 삭제 작업이 이루어지는 구조이다.&lt;br /&gt;
Last In, First Out / 인터럽트가 발생하여 복귀주소를 저장할 때 사용한다.&lt;br /&gt;
스택의 용도로 7가지가 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;부 프로그램 호출 시 복귀주소 저장&lt;/li&gt;
  &lt;li&gt;함수 호출 순서 제어&lt;/li&gt;
  &lt;li&gt;인터럽트가 발생해 복귀 주소 저장 시&lt;/li&gt;
  &lt;li&gt;후위 표기법으로 표현된 산술식 연산&lt;/li&gt;
  &lt;li&gt;0 주소 지정방식 명령어 자료 저장소&lt;/li&gt;
  &lt;li&gt;재귀 프로그램 순서 제어&lt;/li&gt;
  &lt;li&gt;컴파일러를 이용한 언어 번역&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/image/22_01/10/자료구조 3.png&quot; alt=&quot;&quot; width=&quot;60%&quot; height=&quot;&quot; /&gt;
  
&lt;/figure&gt;

&lt;h2 id=&quot;d-큐-queue&quot;&gt;D. 큐 (Queue)&lt;/h2&gt;

&lt;p&gt;한 쪽에서는 삽입, 다른 쪽에서는 삭제가 이루어지는 구조이다.&lt;br /&gt;
시작과 끝을 표시하는 두 개의 포인터가 존재한다.&lt;/p&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/image/22_01/10/자료구조 4.png&quot; alt=&quot;&quot; width=&quot;75%&quot; height=&quot;&quot; /&gt;
  
&lt;/figure&gt;

&lt;h2 id=&quot;e-데크-deq--double-ended-queue&quot;&gt;E. 데크 (DEQ : Double Ended Queue)&lt;/h2&gt;

&lt;p&gt;스택, 큐의 장점만을 갖고 만든 것으로, &lt;strong&gt;삽입과 삭제가 리스트 양쪽에서 모두 발생하는 구조&lt;/strong&gt;이다.&lt;br /&gt;
입력이 한쪽, 출력이 양쪽에서 일어나는 &lt;strong&gt;입력제한&lt;/strong&gt;과 입력이 양쪽, 출력이 한쪽에서 일어나는 &lt;strong&gt;출력제한&lt;/strong&gt;이 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;링크&quot;&gt;링크&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 구조 안내&lt;br /&gt;
&lt;a href=&quot;https://dnf-lover.tistory.com/entry/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%9D%98-%EC%84%A0%ED%98%95-%EB%B9%84%EC%84%A0%ED%98%95-%EB%B6%84%EB%A5%98%EC%97%90-%EB%94%B0%EB%A5%B8-%EA%B0%81-%EC%A2%85%EB%A5%98%EC%99%80-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EB%B3%84-%ED%8A%B9%EC%A7%95-%EA%B0%84%EB%8B%A8-%EC%A0%95%EB%A6%AC&quot;&gt;https://dnf-lover.tistory.com/entry/자료구조-자료구조의-선형-비선형-분류에-따른-각-종류와-자료구조별-특징-간단-정리&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://server-engineer.tistory.com/130&quot;&gt;https://server-engineer.tistory.com/130&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;생활코딩 : 자료구조 안내&lt;br /&gt;
&lt;a href=&quot;https://opentutorials.org/module/1335/8821&quot;&gt;https://opentutorials.org/module/1335/8821&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>JinJeon</name></author><category term="DEV" /><summary type="html">여기서는 간략하게 비선형 구조, 선형 구조로 나누어 살펴본다. 추후에 더 자세한 정리가 이루어지면 링크를 걸어놓을 예정이다. 1. 비선형 구조 하나의 데이터 안에 여러 개의 자료가 존재할 수 있는 것을 말한다. A. 트리 정점과 선분을 이용해 사이클을 이루지 않도록 구성한 그래프 형태로, 방향성이 존재해 부모 ∙ 자식 계층 구조가 명확하다. B. 그래프 정점, 선분을 이용해 사이클을 이루도록 구성한 것으로, 순환이 가능하다. 2. 선형 구조 자료를 구성하는 데이터를 순차적으로 나열한 형태를 말한다. 종류로는 배열(선형 리스트), 연결 리스트, 스택, 큐, 테크 등이 있다. 포인터 등을 사용해 자료를 연결하면 그 결과가 일직선 상에 표시되거나 하나의 원상에 표시된다. A. 배열 (Array) 인덱스를 갖고 있으며, 순차적으로 데이터가 삽입, 삭제될 수 있는 구조이다. 데이터의 순차적 삽입, 삭제 시 가장 효과적이다. 인덱스를 사용해 검색이 빠르다는 장점이 있지만, 중간 삽입 ∙ 삭제가 어렵다는 단점이 있다. B. 연결리스트 (Linked List) 자료 항목 순서에 따라 노드의 포인터 부분을 이용해 서로 연결한 구조이다. 노드의 삽입, 삭제 작업이 용이하며, 기억 공간이 연속적으로 놓이지 않아도 저장이 가능하다. 중간 삽입 ∙ 삭제가 빠르고 용이하다는 장점이 있지만, 접근 속도가 느리며 중간 노드 연결이 끊어질 시 다음 노드를 찾기 어렵다는 단점이 있다. C. 스택 (Stack) 리스트의 한 쪽 끝으로만 자료 삽입, 삭제 작업이 이루어지는 구조이다. Last In, First Out / 인터럽트가 발생하여 복귀주소를 저장할 때 사용한다. 스택의 용도로 7가지가 있다. 부 프로그램 호출 시 복귀주소 저장 함수 호출 순서 제어 인터럽트가 발생해 복귀 주소 저장 시 후위 표기법으로 표현된 산술식 연산 0 주소 지정방식 명령어 자료 저장소 재귀 프로그램 순서 제어 컴파일러를 이용한 언어 번역 D. 큐 (Queue) 한 쪽에서는 삽입, 다른 쪽에서는 삭제가 이루어지는 구조이다. 시작과 끝을 표시하는 두 개의 포인터가 존재한다. E. 데크 (DEQ : Double Ended Queue) 스택, 큐의 장점만을 갖고 만든 것으로, 삽입과 삭제가 리스트 양쪽에서 모두 발생하는 구조이다. 입력이 한쪽, 출력이 양쪽에서 일어나는 입력제한과 입력이 양쪽, 출력이 한쪽에서 일어나는 출력제한이 있다. 링크 데이터 구조 안내 https://dnf-lover.tistory.com/entry/자료구조-자료구조의-선형-비선형-분류에-따른-각-종류와-자료구조별-특징-간단-정리 https://server-engineer.tistory.com/130 생활코딩 : 자료구조 안내 https://opentutorials.org/module/1335/8821</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/default-social-image.png" /><media:content medium="image" url="http://localhost:4000/assets/default-social-image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Shell Script</title><link href="http://localhost:4000/dev/2022/01/09/%EC%89%98/" rel="alternate" type="text/html" title="Shell Script" /><published>2022-01-09T00:00:00+09:00</published><updated>2022-01-09T00:00:00+09:00</updated><id>http://localhost:4000/dev/2022/01/09/%EC%89%98</id><content type="html" xml:base="http://localhost:4000/dev/2022/01/09/%EC%89%98/">&lt;h1 id=&quot;shell&quot;&gt;Shell&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;OS와 대화하는 프로그램으로, 여러 종류가 있으며 그 예시로 ‘bash, zsh’가 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1-shell-script&quot;&gt;1. Shell Script?&lt;/h2&gt;

&lt;p&gt;Shell의 종류는 Bourne Shell, Bash, ksh, zsh가 있다.&lt;br /&gt;
Bash는 Bourne-Agin Shell의 약자로 명령형 편집 기능을 제공하며 리눅스에서 가장 많이 사용된다.&lt;br /&gt;
zsh는 z셸 스크립을 위한 명령 인터프리터이다.&lt;br /&gt;
Shell Script(sh file)를 사용하게 되며, 이는 txt 형식으로 저장되는 프로그램으로, shell이 실행할 수 있는 명령들의 집합이라고 볼 수 있다.&lt;br /&gt;
자동화 작업들을 shell script로 만들어 편리한 사용이 가능하다.&lt;/p&gt;

&lt;h2 id=&quot;2-shell-script-파일-생성-작성-실행&quot;&gt;2. Shell Script 파일 생성, 작성, 실행&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;생성 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi (filename).sh&lt;/code&gt;을 입력해 파일을 생성할 수 있으며, 이 곳에서 shell script를 작성하게 된다.&lt;/li&gt;
  &lt;li&gt;입력 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt;키를 누르면 입력이 가능한 상태가 되며, 한 줄 씩 작성을 진행하면 된다.&lt;/li&gt;
  &lt;li&gt;저장 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esc&lt;/code&gt;키를 누른 뒤, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:wq&lt;/code&gt;키를 입력해 나오면 된다.&lt;/li&gt;
  &lt;li&gt;실행 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sh (filename).sh&lt;/code&gt;를 입력하면 저장된 내용이 실행된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/bin/bash
echo &quot;HIHIHI!&quot;
pwd
ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 작성을 한 뒤, 실행하면 아래의 사진과 같은 결과가 나온다.&lt;br /&gt;
입력값 불러오기(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo&lt;/code&gt;), 현재 위치 경로 출력(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwd&lt;/code&gt;), 현재 위치 디렉토리 파일 출력(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;)의 순서대로 나온 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/220109/12.png&quot; alt=&quot;drawing&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-shell-script내-간단한-문법들&quot;&gt;3. Shell Script내 간단한 문법들&lt;/h2&gt;

&lt;h3 id=&quot;3-1-반복문---for&quot;&gt;3-1. 반복문 - for&lt;/h3&gt;

&lt;p&gt;기본적으로 사용하는 반복문으로 for가 있다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for in - do - done&lt;/code&gt;의 형태로 이루어지며, 코드로 보면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;file &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$files&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
	&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;basename&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;변수로 지정해준 $files내의 각 요소들을 변수명 file로 지정해주었고, do - done 사이에 이와 관련된 내용들을 작성해주면 된다.&lt;/p&gt;

&lt;h3 id=&quot;3-2-파일-디렉토리-찾기---find&quot;&gt;3-2. 파일, 디렉토리 찾기 - find&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DAY*&quot;&lt;/span&gt;

find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DAY*&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; d
find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DAY*&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;‘.’&lt;/code&gt;은 현재 디렉토리 내의 모든 파일, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-name&lt;/code&gt;은 이름으로 찾는 것, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;“DAY*”&lt;/code&gt;는 DAY라는 형식으로 이루어진 모든 파일임을 말한다.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-type d&lt;/code&gt;는 디렉토리로, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-type f&lt;/code&gt;는 파일로 찾는다는 것을 말한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-empty&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-empty&lt;/code&gt;를 이용해 빈 파일을 찾는 데에 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-size&lt;/span&gt; +100M
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-size&lt;/code&gt;를 이용해 특정 크기 이상, 이하의 파일을 찾는 데에 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DAY*&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-exec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-exec&lt;/code&gt;를 이용해 부가적인 작업의 수행이 가능하다.&lt;br /&gt;
검색된 파일이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt; 위치에 들어오게 되고, 추가적인 작업을 이어나가면 된다.&lt;/p&gt;

&lt;h3 id=&quot;3-3-디렉토리-생성--삭제&quot;&gt;3-3. 디렉토리 생성 ∙ 삭제&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;ABC
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; ABC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir&lt;/code&gt;를 이용해 뒤에 나오는 단어의 이름으로 디렉토리를 생성할 수 있다.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm&lt;/code&gt;을 이용해 파일 및 디렉토리의 삭제가 가능하다. 단, 디렉토리의 삭제를 위해서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-r&lt;/code&gt;이라는 옵션이 들어가야하고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt;라는 옵션을 함께 사용하면, 경고 없이 &lt;strong&gt;모두 강제로 삭제된다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-4-경로에서-파일명-가져오기&quot;&gt;3-4. 경로에서 파일명 가져오기&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;basename&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;basename&lt;/code&gt;을 이용하면 특정 경로를 나타내는 값들의 마지막 부분,&lt;br /&gt;
예를 들면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;home/ABC/backup/test.txt&lt;/code&gt;와 같은 상황에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test.txt&lt;/code&gt;만 나오도록 할 수 있다.&lt;br /&gt;
위 코드의 경우, ` dirname=```의 형태를 갖고 있는데, 이렇게 할 경우,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dirname&lt;/code&gt;이라는 변수가 만들어지고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$dirname&lt;/code&gt;로 활용할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;3-5-문자열-일부-가져오기&quot;&gt;3-5. 문자열 일부 가져오기&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;dirnum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dirname&lt;/span&gt;:3&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# dirname : &quot;HELLO WORLD&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# dirnum : LO WORLD&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dirname&lt;/code&gt;의 값으로 나오는 문자열 중, 네 번째&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(3+1)&lt;/code&gt;의 값부터 문자열을 잘라 표현해준다. 즉, 뒤에 나오는 숫자에 맞는 순서의 문자부터 그 뒤의 값들을 보여준다.&lt;/p&gt;

&lt;h3 id=&quot;3-6-조건문-사용하기---if&quot;&gt;3-6. 조건문 사용하기 - if&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  ...
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	...
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; 의 내부에 값이 true일 경우, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt;의 다음에 오는 과정들을 처리하고, 아닐경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt;의 뒤에 오는 과정들을 처리한다. 이 과정을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fi&lt;/code&gt;가 나올 때까지 진행한다.&lt;br /&gt;
조건문의 여러 상황에 대해 정리된 &lt;a href=&quot;https://hand-over.tistory.com/32&quot;&gt;자료 링크&lt;/a&gt;가 있어 아래에 추가적으로 적는다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# if 여러 상황에 대해서&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : A 문자열의 길이가 0이면 TRUE
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : A 문자열의 길이가 0이 아니면 TRUE
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : A와 B값이 같으면 TRUE
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : A와 B값이 다르면 TRUE
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-gt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : A가 B보다 크면 TRUE
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ge&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : A가 B보다 크거나 같으면 TRUE
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-lt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : A가 B보다 작으면 TRUE
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-le&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : A가 B보다 작거나 같으면 TRUE

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 조건식A &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; 조건식B &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : 조건식 A와 B가 모두 TRUE이면 TRUE &lt;span class=&quot;o&quot;&gt;(&amp;amp;&amp;amp;&lt;/span&gt; 와 동일&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 조건식A &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; 조건식B &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : 조건식 A가 TRUE거나 조건식B가 TRUE면 TRUE &lt;span class=&quot;o&quot;&gt;(||&lt;/span&gt; 와 동일&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

파일관련
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : A 파일이 디렉토리면 TRUE
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : A 파일이&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;노드, 디렉토리, 소켓 등등 모두&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 존재하면 TRUE
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : A 파일이 심볼릭 링크면 TRUE
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : A 파일이 읽기 가능하면 TRUE
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : A 파일의 크기가 0 보다 크면 TRUE
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : A 파일이 쓰기 가능하면 TRUE
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : A 파일이 실행 가능하면 TRUE
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : A 파일이 Special character file 이면 TRUE
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : A 파일이 디렉토리가 아닌 일반 regular 파일이면 TRUE
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : A 파일이 소켓이면 TRUE
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-nt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : A 파일 B 파일보다 최신파일이면 참
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  : A 파일이 B 파일보다 이전파일이면 참
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; : A 파일과 B 파일이 같은 파일이면 참
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-7-결과값-표시---echo&quot;&gt;3-7. 결과값 표시 - echo&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;text or 변수명
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적혀진 텍스트, 혹은 변수의 값을 표현해준다.&lt;br /&gt;
JavaScript의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log&lt;/code&gt;와 같은 역할을 한다고 볼 수 있어, Shell Script 사용 시 사용자에게 보여주어야 할 메세지가 있을 때에도 사용할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;3-8-시간-구하기---date&quot;&gt;3-8. 시간 구하기 - date&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;date

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%Y%m%d&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;date라고 작성할 시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2022년 1월 10일 월요일 01시 51분 38초 KST&lt;/code&gt; 와 같이 결과값이 나오게 된다.&lt;br /&gt;
위의 코드같은 경우, 결과 값으로 20220110가 나오게 되며, 이를 활용해 다양한 날짜의 표현이 가능하다. &lt;a href=&quot;https://iamfreeman.tistory.com/entry/리눅스-date-명령어를-이용한-시간-확인-및-설정하기&quot;&gt;세세한 여러 표현 방법을 알려주는 링크&lt;/a&gt;를 참고하면 좋을 듯 하다.&lt;/p&gt;

&lt;h3 id=&quot;3-9-파일-압축하기---zip&quot;&gt;3-9. 파일 압축하기 - zip&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zip BACKUP_&lt;span class=&quot;nv&quot;&gt;$day&lt;/span&gt;.zip ./BEFORE_ZIP

zip AAA.zip &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; ./&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip “파일이름” “압축할 디렉토리”&lt;/code&gt; 의 순서로 작성하면 된다.&lt;br /&gt;
두 번째와 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-r&lt;/code&gt;을 작성하면 현재폴더의 모든 것 및 하위 폴더들도 모두 압축하게 된다.&lt;/p&gt;

&lt;h3 id=&quot;3-10-다른-서버로의-파일-전송---scp&quot;&gt;3-10. 다른 서버로의 파일 전송 - scp&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 로컬에서 원격&lt;/span&gt;
scp &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;전송할 파일 경로] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;유저명]@[IP주소]:[받을 경로]

&lt;span class=&quot;c&quot;&gt;# 원격에서 로컬&lt;/span&gt;
scp &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;유저명]@[IP주소]:[전송할 파일 경로] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;받을 경로]

&lt;span class=&quot;c&quot;&gt;# 원격에서 원격&lt;/span&gt;
scp &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;유저명]@[IP주소]:[전송할 파일 경로] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;유저명]@[IP주소]:[받을 경로]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;scp ./BACKUP_$day.zip $ubuntuserver:backup와 같이 작성하면, 내 서버내의 특정 파일을 다른 원격으로 보내는 경우로, 첫 번째 예시의 사례와 같다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;링크&quot;&gt;링크&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;쉘 스크립트 생성&lt;br /&gt;
&lt;a href=&quot;https://jaynamm.tistory.com/entry/Shell-Script-Shell-Script-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EC%8B%A4%ED%96%89&quot;&gt;https://jaynamm.tistory.com/entry/Shell-Script-Shell-Script-생성-및-실행&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://rrecoder.tistory.com/62&quot;&gt;https://rrecoder.tistory.com/62&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;쉘 스크립트 scp 간단 사용법&lt;br /&gt;
&lt;a href=&quot;https://doheejin.github.io/linux/2021/03/03/linux-scp.html&quot;&gt;https://doheejin.github.io/linux/2021/03/03/linux-scp.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;터미널 디렉토리, 파일 삭제 방법&lt;br /&gt;
&lt;a href=&quot;https://www.delftstack.com/ko/howto/linux/how-to-delete-files-and-directories-in-linux-terminal/&quot;&gt;https://www.delftstack.com/ko/howto/linux/how-to-delete-files-and-directories-in-linux-terminal/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>JinJeon</name></author><category term="DEV" /><summary type="html">Shell OS와 대화하는 프로그램으로, 여러 종류가 있으며 그 예시로 ‘bash, zsh’가 있다. 1. Shell Script? Shell의 종류는 Bourne Shell, Bash, ksh, zsh가 있다. Bash는 Bourne-Agin Shell의 약자로 명령형 편집 기능을 제공하며 리눅스에서 가장 많이 사용된다. zsh는 z셸 스크립을 위한 명령 인터프리터이다. Shell Script(sh file)를 사용하게 되며, 이는 txt 형식으로 저장되는 프로그램으로, shell이 실행할 수 있는 명령들의 집합이라고 볼 수 있다. 자동화 작업들을 shell script로 만들어 편리한 사용이 가능하다. 2. Shell Script 파일 생성, 작성, 실행 생성 : vi (filename).sh을 입력해 파일을 생성할 수 있으며, 이 곳에서 shell script를 작성하게 된다. 입력 : i키를 누르면 입력이 가능한 상태가 되며, 한 줄 씩 작성을 진행하면 된다. 저장 : esc키를 누른 뒤, :wq키를 입력해 나오면 된다. 실행 : sh (filename).sh를 입력하면 저장된 내용이 실행된다. #!/bin/bash echo &quot;HIHIHI!&quot; pwd ls 위와 같이 작성을 한 뒤, 실행하면 아래의 사진과 같은 결과가 나온다. 입력값 불러오기(echo), 현재 위치 경로 출력(pwd), 현재 위치 디렉토리 파일 출력(ls)의 순서대로 나온 것을 볼 수 있다. 3. Shell Script내 간단한 문법들 3-1. 반복문 - for 기본적으로 사용하는 반복문으로 for가 있다. for in - do - done의 형태로 이루어지며, 코드로 보면 다음과 같다. for file in $files do filename=`basename $file` done 변수로 지정해준 $files내의 각 요소들을 변수명 file로 지정해주었고, do - done 사이에 이와 관련된 내용들을 작성해주면 된다. 3-2. 파일, 디렉토리 찾기 - find find . -name &quot;DAY*&quot; find . -name &quot;DAY*&quot; -type d find . -name &quot;DAY*&quot; -type f ‘.’은 현재 디렉토리 내의 모든 파일, -name은 이름으로 찾는 것, “DAY*”는 DAY라는 형식으로 이루어진 모든 파일임을 말한다. -type d는 디렉토리로, -type f는 파일로 찾는다는 것을 말한다. find . -empty -empty를 이용해 빈 파일을 찾는 데에 사용할 수 있다. find . -size +100M -size를 이용해 특정 크기 이상, 이하의 파일을 찾는 데에 사용할 수 있다. find . -name &quot;DAY*&quot; -exec ls -l {} \; -exec를 이용해 부가적인 작업의 수행이 가능하다. 검색된 파일이 {} 위치에 들어오게 되고, 추가적인 작업을 이어나가면 된다. 3-3. 디렉토리 생성 ∙ 삭제 mkdir ABC rm -rf ABC mkdir를 이용해 뒤에 나오는 단어의 이름으로 디렉토리를 생성할 수 있다. rm을 이용해 파일 및 디렉토리의 삭제가 가능하다. 단, 디렉토리의 삭제를 위해서는 -r이라는 옵션이 들어가야하고, -f라는 옵션을 함께 사용하면, 경고 없이 모두 강제로 삭제된다. 3-4. 경로에서 파일명 가져오기 dirname=`basename $dir` basename을 이용하면 특정 경로를 나타내는 값들의 마지막 부분, 예를 들면, home/ABC/backup/test.txt와 같은 상황에서 test.txt만 나오도록 할 수 있다. 위 코드의 경우, ` dirname=```의 형태를 갖고 있는데, 이렇게 할 경우, dirname이라는 변수가 만들어지고, $dirname로 활용할 수 있다. 3-5. 문자열 일부 가져오기 dirnum=${dirname:3} # dirname : &quot;HELLO WORLD&quot; # dirnum : LO WORLD dirname의 값으로 나오는 문자열 중, 네 번째(3+1)의 값부터 문자열을 잘라 표현해준다. 즉, 뒤에 나오는 숫자에 맞는 순서의 문자부터 그 뒤의 값들을 보여준다. 3-6. 조건문 사용하기 - if if [ -f $filename ] then ... else ... fi if 의 내부에 값이 true일 경우, then의 다음에 오는 과정들을 처리하고, 아닐경우 else의 뒤에 오는 과정들을 처리한다. 이 과정을 fi가 나올 때까지 진행한다. 조건문의 여러 상황에 대해 정리된 자료 링크가 있어 아래에 추가적으로 적는다. # if 여러 상황에 대해서 [ -z ${A} ] : A 문자열의 길이가 0이면 TRUE [ -n ${A} ] : A 문자열의 길이가 0이 아니면 TRUE [ ${A} -eq ${B} ] : A와 B값이 같으면 TRUE [ ${A} -ne ${B} ] : A와 B값이 다르면 TRUE [ ${A} -gt ${B} ] : A가 B보다 크면 TRUE [ ${A} -ge ${B} ] : A가 B보다 크거나 같으면 TRUE [ ${A} -lt ${B} ] : A가 B보다 작으면 TRUE [ ${A} -le ${B} ] : A가 B보다 작거나 같으면 TRUE [ 조건식A -a 조건식B ] : 조건식 A와 B가 모두 TRUE이면 TRUE (&amp;amp;&amp;amp; 와 동일) [ 조건식A -o 조건식B ] : 조건식 A가 TRUE거나 조건식B가 TRUE면 TRUE (|| 와 동일) 파일관련 [ -d ${A} ] : A 파일이 디렉토리면 TRUE [ -e ${A} ] : A 파일이(노드, 디렉토리, 소켓 등등 모두) 존재하면 TRUE [ -L ${A} ] : A 파일이 심볼릭 링크면 TRUE [ -r ${A} ] : A 파일이 읽기 가능하면 TRUE [ -s ${A} ] : A 파일의 크기가 0 보다 크면 TRUE [ -w ${A} ] : A 파일이 쓰기 가능하면 TRUE [ -x ${A} ] : A 파일이 실행 가능하면 TRUE [ -c ${A} ] : A 파일이 Special character file 이면 TRUE [ -f ${A} ] : A 파일이 디렉토리가 아닌 일반 regular 파일이면 TRUE [ -S ${A} ] : A 파일이 소켓이면 TRUE [ ${A} -nt ${B} ] : A 파일 B 파일보다 최신파일이면 참 [ ${A} -ot ${B} ] : A 파일이 B 파일보다 이전파일이면 참 [ ${A} -ef ${B} ] : A 파일과 B 파일이 같은 파일이면 참 3-7. 결과값 표시 - echo echo text or 변수명 적혀진 텍스트, 혹은 변수의 값을 표현해준다. JavaScript의 console.log와 같은 역할을 한다고 볼 수 있어, Shell Script 사용 시 사용자에게 보여주어야 할 메세지가 있을 때에도 사용할 수 있다. 3-8. 시간 구하기 - date date day=`date +%Y%m%d` date라고 작성할 시 2022년 1월 10일 월요일 01시 51분 38초 KST 와 같이 결과값이 나오게 된다. 위의 코드같은 경우, 결과 값으로 20220110가 나오게 되며, 이를 활용해 다양한 날짜의 표현이 가능하다. 세세한 여러 표현 방법을 알려주는 링크를 참고하면 좋을 듯 하다. 3-9. 파일 압축하기 - zip zip BACKUP_$day.zip ./BEFORE_ZIP zip AAA.zip -r ./* zip “파일이름” “압축할 디렉토리” 의 순서로 작성하면 된다. 두 번째와 같이 -r을 작성하면 현재폴더의 모든 것 및 하위 폴더들도 모두 압축하게 된다. 3-10. 다른 서버로의 파일 전송 - scp # 로컬에서 원격 scp [전송할 파일 경로] [유저명]@[IP주소]:[받을 경로] # 원격에서 로컬 scp [유저명]@[IP주소]:[전송할 파일 경로] [받을 경로] # 원격에서 원격 scp [유저명]@[IP주소]:[전송할 파일 경로] [유저명]@[IP주소]:[받을 경로] scp ./BACKUP_$day.zip $ubuntuserver:backup와 같이 작성하면, 내 서버내의 특정 파일을 다른 원격으로 보내는 경우로, 첫 번째 예시의 사례와 같다. 링크 쉘 스크립트 생성 https://jaynamm.tistory.com/entry/Shell-Script-Shell-Script-생성-및-실행 https://rrecoder.tistory.com/62 쉘 스크립트 scp 간단 사용법 https://doheejin.github.io/linux/2021/03/03/linux-scp.html 터미널 디렉토리, 파일 삭제 방법 https://www.delftstack.com/ko/howto/linux/how-to-delete-files-and-directories-in-linux-terminal/</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/default-social-image.png" /><media:content medium="image" url="http://localhost:4000/assets/default-social-image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Linux, Ubuntu, SSH</title><link href="http://localhost:4000/dev/2022/01/06/%EB%A6%AC%EB%88%85%EC%8A%A4/" rel="alternate" type="text/html" title="Linux, Ubuntu, SSH" /><published>2022-01-06T00:00:00+09:00</published><updated>2022-01-06T00:00:00+09:00</updated><id>http://localhost:4000/dev/2022/01/06/%EB%A6%AC%EB%88%85%EC%8A%A4</id><content type="html" xml:base="http://localhost:4000/dev/2022/01/06/%EB%A6%AC%EB%88%85%EC%8A%A4/">&lt;h1 id=&quot;리눅스&quot;&gt;리눅스&lt;/h1&gt;

&lt;h2 id=&quot;1-개발환경&quot;&gt;1. 개발환경&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;로컬 컴퓨터, 리모트 컴퓨터 : 웹 서버에 배포하기 위해서 로컬 컴퓨터에서 작업한 내용을 리모트 컴퓨터로 옮기게 된다.&lt;/li&gt;
  &lt;li&gt;로컬 컴퓨터, 가상 컴퓨터 : 물리적 환경에서만 리모트 컴퓨터를 쓸 수 있는 제약을 막기 위해 &lt;strong&gt;가상 컴퓨터에서의 배포&lt;/strong&gt;를 진행해보게 되며, 이를 위해 가상 환경 구현을 진행한다.&lt;/li&gt;
  &lt;li&gt;유닉스 : iOS, OS X 등의 베이스가 되는 컴퓨터의 운영체제로, 1969년 벨 연구소 직원인 켄 톰슨이 게임의 원활한 진행을 위해 고안하다가 만들었다.&lt;/li&gt;
  &lt;li&gt;리눅스 : 윈도우, 맥OS와 달리 무료로 제공되는 운영체제로, ‘리누스 토르발스’가 1991년에 만들었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;linux&quot;&gt;Linux&lt;/h1&gt;

&lt;h2 id=&quot;1-linux의-특징&quot;&gt;1. Linux의 특징&lt;/h2&gt;

&lt;p&gt;유닉스 기반의 무료 오픈 소스 운영체제이며, 윈도우와 맥과 가장 구별되는 점으로 &lt;strong&gt;‘오픈 소스’&lt;/strong&gt;를 꼽을 수 있다.&lt;br /&gt;
커스터마이즈된 OS를 만들 수 있는 커널로, Linux 커널을 기반으로 하며, 커널은 운영 체제의 핵심이라고 할 수 있다.
즉, 이 커널로 자신의 운영 체제를 개발할 수 있다.&lt;br /&gt;
Linux 아키텍처는 커널, 시스템 라이브러리, 시스템 도구와 같은 구성 요소로 이루어진다.&lt;br /&gt;
장치 메모리를 관리하고 프로세스를 관리하는 역할을 수행한다.&lt;br /&gt;
현재 여러 사용자가 기본 설정에 따라 다운로드할 수 있는 Linux 배포판을 사용할 수 있으며, 이 배포판은 여러 개발자들이 만들었다.&lt;br /&gt;
현재 Linux 커널은 운영 체제 역할을 위한 다양한 배포판을 지원하는데, 이 중 하나가 바로 &lt;strong&gt;Ubuntu&lt;/strong&gt;이다.&lt;/p&gt;

&lt;h2 id=&quot;2-linux의-장점&quot;&gt;2. Linux의 장점&lt;/h2&gt;

&lt;p&gt;안정적이며 안전한 운영 체제이며 여러 사용자가 동시 작업할 수 있기 때문에 다중 사용자 시스템으로 사용된다.&lt;br /&gt;
많은 프로세서를 지원하며 멀티 태스킹으로 많은 프로세스의 실행이 가능하다.&lt;/p&gt;

&lt;h2 id=&quot;3-osoperating-system-운영체제&quot;&gt;3. OS(Operating System, 운영체제)&lt;/h2&gt;

&lt;p&gt;컴퓨터 시스템의 하드웨어, 소프트웨어 자원들을 효율적으로 운영해, 사용자의 시스템 이용을 편리하도록 하는 &lt;strong&gt;시스템 소프트웨어&lt;/strong&gt;를 말한다.&lt;br /&gt;
애플리케이션들이 동작하도록 자원을 관리하며 &lt;strong&gt;핵심 소프트웨어&lt;/strong&gt;의 역할을 수행한다.&lt;br /&gt;
추가적으로, 외부의 접근을 방어하는 역할도 수행한다.&lt;br /&gt;
운영체제는 &lt;strong&gt;사용자 영역&lt;/strong&gt;과 &lt;strong&gt;커널 영역&lt;/strong&gt;으로 나눌 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사용자 영역 : 사용자의 프로그램 사용을 위한 공간이다.&lt;/li&gt;
  &lt;li&gt;커널 영역 : 사용자 영역의 사용 프로그램을 안전하고 효율적으로 작동하기 위해 컴퓨터 자원을 관리하는 공간이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-kernal커널&quot;&gt;4. Kernal(커널)&lt;/h2&gt;

&lt;p&gt;컴퓨터의 운영체제의 핵심이 되는 프로그램으로, 시스템의 모든 것을 통제하는 역할을 수행한다.&lt;br /&gt;
운영체제의 프로그램 수행을 위한 여러 서비스를 제공한다.&lt;br /&gt;
보안, 자원관리, 추상화 같은 역할을 수행한다.&lt;/p&gt;

&lt;h2 id=&quot;5-배포판&quot;&gt;5. 배포판?&lt;/h2&gt;

&lt;p&gt;리눅스에서 작동하는 여러 프로그램을 모아 놓은 것으로, 이렇게 여러 프로그램이 모여 주어진 일을 수행하는 경우가 있으며, 이 중 하나가 Ubuntu이다.&lt;/p&gt;

&lt;h2 id=&quot;6-parallels-ubuntu-설치&quot;&gt;6. Parallels, Ubuntu 설치&lt;/h2&gt;

&lt;p&gt;이미 윈도우 사용을 위해 Parallels 구입을 한 상태이기 때문에 Parallels로 Ubuntu 설치를 진행했다.&lt;br /&gt;
우선, &lt;a href=&quot;https://ubuntu.com&quot;&gt;Ubuntu&lt;/a&gt; 페이지에서 다운로드를 진행하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ubuntu-20.04.3-desktop-amd64.iso&lt;/code&gt;라는 이름의 파일이 생기게 된다.&lt;br /&gt;
Parallels에서 새로운 OS 설치 버튼을 클릭하면 다운로드된 iso파일을 스스로 인식해 진행할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/220106/2.png&quot; alt=&quot;drawing&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/220106/3.png&quot; alt=&quot;drawing&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일반적인 윈도우 같은 운영체제의 설치와 같은 방식으로 진행되며, 따라서 진행을 하다보면 Ubuntu의 설치가 완료된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/220106/4.png&quot; alt=&quot;drawing&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;7-ssh-설정&quot;&gt;7. SSH 설정&lt;/h2&gt;

&lt;p&gt;원격 접속 설정을 위해 ssh 설정을 해야 하는데, Ubuntu 내의 터미널 파일을 켜야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/220106/5.png&quot; alt=&quot;drawing&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;좌측 하단에 메뉴 버튼을 클릭 시 이러한 창이 나오는데, 거기서 terminal을 찾아서 실행하면 된다. 단축키는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + Alt + T&lt;/code&gt;(맥에서는 아직 찾지 못함)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/220106/6.png&quot; alt=&quot;drawing&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 창이 나오게 되고, ssh와 관련된 입력들을 넣어주면 된다.&lt;/p&gt;

&lt;h3 id=&quot;1-ssh-server-install&quot;&gt;1) SSH server install&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt update
$ sudo apt install openssh-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 명령어를 입력해 SSH server를 설치한다.&lt;br /&gt;
설치 여부의 확인을 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo systemctl status ssh&lt;/code&gt;를 입력하면 아래와 같은 결과가 나오는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/220106/7.png&quot; alt=&quot;drawing&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서 &lt;strong&gt;active(running)&lt;/strong&gt;이라는 표시가 있으면 제대로 동작하고 있다고 할 수 있다.&lt;br /&gt;
만약, 동작하지 않을 시 아래의 명령어 중 하나를 입력해 실행시킨다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo systemctl enable ssh
$ sudo systemctl start ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-firewall&quot;&gt;2) Firewall&lt;/h3&gt;

&lt;p&gt;방화벽을 사용 중일 경우, SSH를 허용해야 하며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ sudo ufw allow ssh&lt;/code&gt;를 입력해 허용할 수 있다.&lt;br /&gt;
방화벽 사용 여부의 확인은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ sudo ufw status&lt;/code&gt;를 통해 할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;3-client&quot;&gt;3) Client&lt;/h3&gt;

&lt;p&gt;Ubuntu는 기본적으로 SSH client가 설치되어 있는데, 혹시 설치되지 않은 경우에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ sudo apt-get install openssh-client&lt;/code&gt;를 통해 설치할 수 있다.&lt;br /&gt;
Client에서의 실행을 위해 username과 IP주소가 필요한데, IP주소는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip a&lt;/code&gt;명령어를 통해서 확인할 수 있다.&lt;br /&gt;
명령어 입력 시 긴 줄이 나오게 되는데, 이 중 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inet (IP주소)/24 brd~&lt;/code&gt;라고 되어 있는 부분에서 IP주소를 가져오면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/220106/8.png&quot; alt=&quot;drawing&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;원래의 이용하는 PC(Client)에서 터미널로 들어가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username@IP&lt;/code&gt;를 입력하면 접속과 관련된 질문이 나오고, yes를 누른 뒤 비밀번호 입력까지 완료하면 접속이 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/220106/9.png&quot; alt=&quot;drawing&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;접속을 나오고 싶을 때에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exit&lt;/code&gt;를 입력하면 나올 수 있고, SSH 종료를 위해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo systemctl stop ssh&lt;/code&gt;를 입력하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/220106/10.png&quot; alt=&quot;drawing&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-directory-생성&quot;&gt;4) Directory 생성&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir (filename)&lt;/code&gt;입력 시 생성이 가능하다.&lt;br /&gt;
이전과 같이 원격으로 접속을 하고, 입력하게 될 시, 새로운 디렉토리가 만들어지게 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/220106/11.png&quot; alt=&quot;drawing&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;는 디렉토리 내의 파일 목록들을 보여주는데, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir&lt;/code&gt;을 한 뒤 다시 보면 생성된 것을 확인할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;5-접근-권한-부여&quot;&gt;5) 접근 권한 부여&lt;/h3&gt;

&lt;p&gt;chmod라는 명령어를 통해서 파일과 폴더에 대한 접근권한을 부여할 수 있다.&lt;br /&gt;
정확한 명령어는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod [옵션] [사용자] [설정기호] [권한] [file or directory]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;접근 권한 문자열&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;기호&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;접근권한&lt;/td&gt;
      &lt;td&gt;r&lt;/td&gt;
      &lt;td&gt;읽기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;w&lt;/td&gt;
      &lt;td&gt;쓰기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;실행&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;수행 연산&lt;/td&gt;
      &lt;td&gt;+&lt;/td&gt;
      &lt;td&gt;권한 추가&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;권한 제거&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;+&lt;/td&gt;
      &lt;td&gt;권한 부여&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;사용자&lt;/td&gt;
      &lt;td&gt;u&lt;/td&gt;
      &lt;td&gt;user의 약자, 소유자&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;g&lt;/td&gt;
      &lt;td&gt;group의 약자, 그룹&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;o&lt;/td&gt;
      &lt;td&gt;other의 약자, 일반 사용자&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;all의 약자, 모든 사용자&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;비어 있음&lt;/td&gt;
      &lt;td&gt;a와 동일&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;접근 권한 숫자열&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;8진수&lt;/th&gt;
      &lt;th&gt;2진수&lt;/th&gt;
      &lt;th&gt;파일 모드&lt;/th&gt;
      &lt;th&gt;권한&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;000&lt;/td&gt;
      &lt;td&gt;- - -&lt;/td&gt;
      &lt;td&gt;권한 없음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;001&lt;/td&gt;
      &lt;td&gt;- - x&lt;/td&gt;
      &lt;td&gt;실행&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;010&lt;/td&gt;
      &lt;td&gt;- w -&lt;/td&gt;
      &lt;td&gt;쓰기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;011&lt;/td&gt;
      &lt;td&gt;- w x&lt;/td&gt;
      &lt;td&gt;쓰기, 실행&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;r - -&lt;/td&gt;
      &lt;td&gt;읽기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;101&lt;/td&gt;
      &lt;td&gt;r - x&lt;/td&gt;
      &lt;td&gt;읽기, 실행&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;110&lt;/td&gt;
      &lt;td&gt;r w -&lt;/td&gt;
      &lt;td&gt;읽기, 쓰기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;111&lt;/td&gt;
      &lt;td&gt;r w x&lt;/td&gt;
      &lt;td&gt;읽기, 쓰기, 실행&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;숫자열 세 개를 작성하는 경우, 소유자&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(u)&lt;/code&gt;, 그룹&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(g)&lt;/code&gt;, 일반사용자&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(o)&lt;/code&gt;의 순서로 권한을 부여한다.&lt;br /&gt;
예를 들어 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;754&lt;/code&gt;의 경우 &lt;strong&gt;소유자는 7(읽기, 쓰기, 실행), 그룹은 5(읽기, 실행), 일반사용자는 4(읽기)&lt;/strong&gt;가 가능한 것으로 설정할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jinjeon@ubuntu:~$ chmod 764 test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 입력 시, test 디렉토리에 소유자 7, 그룹 6, 일반 사용자 4의 권한을 준 것이다.&lt;/p&gt;

&lt;h1 id=&quot;링크&quot;&gt;링크&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;VirtualBox, Ubuntu 설치 안내&lt;br /&gt;
&lt;a href=&quot;https://popcorn16.tistory.com/85&quot;&gt;https://popcorn16.tistory.com/85&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;parallels, Ubuntu 설치 안내&lt;br /&gt;
&lt;a href=&quot;https://m.blog.naver.com/woodkill/220790227283&quot;&gt;https://m.blog.naver.com/woodkill/220790227283&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Linux, Ubuntu의 차이&lt;br /&gt;
&lt;a href=&quot;https://hanamon.kr/리눅스는-무엇이고-우분투는-무엇인가/&quot;&gt;https://ko.strephonsays.com/difference-between-linux-and-ubuntu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;SSH 설치 및 접속 방법&lt;br /&gt;
&lt;a href=&quot;https://codechacha.com/ko/ubuntu-install-openssh/&quot;&gt;https://codechacha.com/ko/ubuntu-install-openssh/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://jmoon.co.kr/183&quot;&gt;https://jmoon.co.kr/183&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ubuntu root 계정 전환 방법&lt;br /&gt;
&lt;a href=&quot;https://gabii.tistory.com/entry/Ubuntu-%EC%B4%88%EA%B8%B0-root-%EA%B3%84%EC%A0%95-%EC%84%A4%EC%A0%95-%EB%B0%8F-%EA%B3%84%EC%A0%95-%EC%A0%84%ED%99%98&quot;&gt;https://gabii.tistory.com/entry/Ubuntu-초기-root-계정-설정-및-계정-전환&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;폴더 권한 변경(764)&lt;br /&gt;
&lt;a href=&quot;https://itworld.gmax8.com/25&quot;&gt;https://itworld.gmax8.com/25&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>JinJeon</name></author><category term="DEV" /><summary type="html">리눅스 1. 개발환경 로컬 컴퓨터, 리모트 컴퓨터 : 웹 서버에 배포하기 위해서 로컬 컴퓨터에서 작업한 내용을 리모트 컴퓨터로 옮기게 된다. 로컬 컴퓨터, 가상 컴퓨터 : 물리적 환경에서만 리모트 컴퓨터를 쓸 수 있는 제약을 막기 위해 가상 컴퓨터에서의 배포를 진행해보게 되며, 이를 위해 가상 환경 구현을 진행한다. 유닉스 : iOS, OS X 등의 베이스가 되는 컴퓨터의 운영체제로, 1969년 벨 연구소 직원인 켄 톰슨이 게임의 원활한 진행을 위해 고안하다가 만들었다. 리눅스 : 윈도우, 맥OS와 달리 무료로 제공되는 운영체제로, ‘리누스 토르발스’가 1991년에 만들었다. Linux 1. Linux의 특징 유닉스 기반의 무료 오픈 소스 운영체제이며, 윈도우와 맥과 가장 구별되는 점으로 ‘오픈 소스’를 꼽을 수 있다. 커스터마이즈된 OS를 만들 수 있는 커널로, Linux 커널을 기반으로 하며, 커널은 운영 체제의 핵심이라고 할 수 있다. 즉, 이 커널로 자신의 운영 체제를 개발할 수 있다. Linux 아키텍처는 커널, 시스템 라이브러리, 시스템 도구와 같은 구성 요소로 이루어진다. 장치 메모리를 관리하고 프로세스를 관리하는 역할을 수행한다. 현재 여러 사용자가 기본 설정에 따라 다운로드할 수 있는 Linux 배포판을 사용할 수 있으며, 이 배포판은 여러 개발자들이 만들었다. 현재 Linux 커널은 운영 체제 역할을 위한 다양한 배포판을 지원하는데, 이 중 하나가 바로 Ubuntu이다. 2. Linux의 장점 안정적이며 안전한 운영 체제이며 여러 사용자가 동시 작업할 수 있기 때문에 다중 사용자 시스템으로 사용된다. 많은 프로세서를 지원하며 멀티 태스킹으로 많은 프로세스의 실행이 가능하다. 3. OS(Operating System, 운영체제) 컴퓨터 시스템의 하드웨어, 소프트웨어 자원들을 효율적으로 운영해, 사용자의 시스템 이용을 편리하도록 하는 시스템 소프트웨어를 말한다. 애플리케이션들이 동작하도록 자원을 관리하며 핵심 소프트웨어의 역할을 수행한다. 추가적으로, 외부의 접근을 방어하는 역할도 수행한다. 운영체제는 사용자 영역과 커널 영역으로 나눌 수 있다. 사용자 영역 : 사용자의 프로그램 사용을 위한 공간이다. 커널 영역 : 사용자 영역의 사용 프로그램을 안전하고 효율적으로 작동하기 위해 컴퓨터 자원을 관리하는 공간이다. 4. Kernal(커널) 컴퓨터의 운영체제의 핵심이 되는 프로그램으로, 시스템의 모든 것을 통제하는 역할을 수행한다. 운영체제의 프로그램 수행을 위한 여러 서비스를 제공한다. 보안, 자원관리, 추상화 같은 역할을 수행한다. 5. 배포판? 리눅스에서 작동하는 여러 프로그램을 모아 놓은 것으로, 이렇게 여러 프로그램이 모여 주어진 일을 수행하는 경우가 있으며, 이 중 하나가 Ubuntu이다. 6. Parallels, Ubuntu 설치 이미 윈도우 사용을 위해 Parallels 구입을 한 상태이기 때문에 Parallels로 Ubuntu 설치를 진행했다. 우선, Ubuntu 페이지에서 다운로드를 진행하면 ubuntu-20.04.3-desktop-amd64.iso라는 이름의 파일이 생기게 된다. Parallels에서 새로운 OS 설치 버튼을 클릭하면 다운로드된 iso파일을 스스로 인식해 진행할 수 있다. 일반적인 윈도우 같은 운영체제의 설치와 같은 방식으로 진행되며, 따라서 진행을 하다보면 Ubuntu의 설치가 완료된다. 7. SSH 설정 원격 접속 설정을 위해 ssh 설정을 해야 하는데, Ubuntu 내의 터미널 파일을 켜야 한다. 좌측 하단에 메뉴 버튼을 클릭 시 이러한 창이 나오는데, 거기서 terminal을 찾아서 실행하면 된다. 단축키는 Ctrl + Alt + T(맥에서는 아직 찾지 못함) 위와 같은 창이 나오게 되고, ssh와 관련된 입력들을 넣어주면 된다. 1) SSH server install $ sudo apt update $ sudo apt install openssh-server 위 명령어를 입력해 SSH server를 설치한다. 설치 여부의 확인을 위해 sudo systemctl status ssh를 입력하면 아래와 같은 결과가 나오는 것을 볼 수 있다. 여기서 active(running)이라는 표시가 있으면 제대로 동작하고 있다고 할 수 있다. 만약, 동작하지 않을 시 아래의 명령어 중 하나를 입력해 실행시킨다. $ sudo systemctl enable ssh $ sudo systemctl start ssh 2) Firewall 방화벽을 사용 중일 경우, SSH를 허용해야 하며, $ sudo ufw allow ssh를 입력해 허용할 수 있다. 방화벽 사용 여부의 확인은 $ sudo ufw status를 통해 할 수 있다. 3) Client Ubuntu는 기본적으로 SSH client가 설치되어 있는데, 혹시 설치되지 않은 경우에는 $ sudo apt-get install openssh-client를 통해 설치할 수 있다. Client에서의 실행을 위해 username과 IP주소가 필요한데, IP주소는 ip a명령어를 통해서 확인할 수 있다. 명령어 입력 시 긴 줄이 나오게 되는데, 이 중 inet (IP주소)/24 brd~라고 되어 있는 부분에서 IP주소를 가져오면 된다. 원래의 이용하는 PC(Client)에서 터미널로 들어가 username@IP를 입력하면 접속과 관련된 질문이 나오고, yes를 누른 뒤 비밀번호 입력까지 완료하면 접속이 된다. 접속을 나오고 싶을 때에는 exit를 입력하면 나올 수 있고, SSH 종료를 위해서 sudo systemctl stop ssh를 입력하면 된다. 4) Directory 생성 mkdir (filename)입력 시 생성이 가능하다. 이전과 같이 원격으로 접속을 하고, 입력하게 될 시, 새로운 디렉토리가 만들어지게 된다. ls는 디렉토리 내의 파일 목록들을 보여주는데, mkdir을 한 뒤 다시 보면 생성된 것을 확인할 수 있다. 5) 접근 권한 부여 chmod라는 명령어를 통해서 파일과 폴더에 대한 접근권한을 부여할 수 있다. 정확한 명령어는 아래와 같다. chmod [옵션] [사용자] [설정기호] [권한] [file or directory] 접근 권한 문자열 구분 기호 설명 접근권한 r 읽기   w 쓰기   x 실행 수행 연산 + 권한 추가   - 권한 제거   + 권한 부여 사용자 u user의 약자, 소유자   g group의 약자, 그룹   o other의 약자, 일반 사용자   a all의 약자, 모든 사용자   비어 있음 a와 동일 접근 권한 숫자열 8진수 2진수 파일 모드 권한 0 000 - - - 권한 없음 1 001 - - x 실행 2 010 - w - 쓰기 3 011 - w x 쓰기, 실행 4 100 r - - 읽기 5 101 r - x 읽기, 실행 6 110 r w - 읽기, 쓰기 7 111 r w x 읽기, 쓰기, 실행 숫자열 세 개를 작성하는 경우, 소유자(u), 그룹(g), 일반사용자(o)의 순서로 권한을 부여한다. 예를 들어 754의 경우 소유자는 7(읽기, 쓰기, 실행), 그룹은 5(읽기, 실행), 일반사용자는 4(읽기)가 가능한 것으로 설정할 수 있다. jinjeon@ubuntu:~$ chmod 764 test 위와 같이 입력 시, test 디렉토리에 소유자 7, 그룹 6, 일반 사용자 4의 권한을 준 것이다. 링크 VirtualBox, Ubuntu 설치 안내 https://popcorn16.tistory.com/85 parallels, Ubuntu 설치 안내 https://m.blog.naver.com/woodkill/220790227283 Linux, Ubuntu의 차이 https://ko.strephonsays.com/difference-between-linux-and-ubuntu SSH 설치 및 접속 방법 https://codechacha.com/ko/ubuntu-install-openssh/ https://jmoon.co.kr/183 Ubuntu root 계정 전환 방법 https://gabii.tistory.com/entry/Ubuntu-초기-root-계정-설정-및-계정-전환 폴더 권한 변경(764) https://itworld.gmax8.com/25</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/default-social-image.png" /><media:content medium="image" url="http://localhost:4000/assets/default-social-image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">디지털 논리회로</title><link href="http://localhost:4000/dev/2022/01/03/%EB%94%94%EC%A7%80%ED%84%B8_%EB%85%BC%EB%A6%AC%ED%9A%8C%EB%A1%9C/" rel="alternate" type="text/html" title="디지털 논리회로" /><published>2022-01-03T00:00:00+09:00</published><updated>2022-01-03T00:00:00+09:00</updated><id>http://localhost:4000/dev/2022/01/03/%EB%94%94%EC%A7%80%ED%84%B8_%EB%85%BC%EB%A6%AC%ED%9A%8C%EB%A1%9C</id><content type="html" xml:base="http://localhost:4000/dev/2022/01/03/%EB%94%94%EC%A7%80%ED%84%B8_%EB%85%BC%EB%A6%AC%ED%9A%8C%EB%A1%9C/">&lt;h1 id=&quot;디지털-논리회로란&quot;&gt;디지털 논리회로란?&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;이산적인 숫자를 게이트 입력으로 받아, 입력 논리의 필요 조건을 만족, 불만족하는 지에 대해 1 또는 0의 신호로 출력하는 하드웨어 소자이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;디지털 논리회로의 연결을 통해 &lt;em&gt;컴퓨터의&lt;/em&gt; 구성 부품을 만들게 된다.&lt;br /&gt;
또한, 논리적 사고를 위한 가장 기본적인 동작으로 프로그래밍 논리 구조와 연결된다.&lt;/p&gt;

&lt;h2 id=&quot;종류&quot;&gt;종류&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;AND 게이트(논리곱) : 두 입력 모두 1인 경우에만 1, 나머지는 0이 출력된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/image/220103/ANDgate.png&quot; alt=&quot;drawing&quot; width=&quot;25%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OR 게이트(논리합) : 두 입력 중 1이 존재할 경우 1, 아닐 시 0이 출력된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/image/220103/ORgate.png&quot; alt=&quot;drawing&quot; width=&quot;25%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NOT 게이트(논리부정, INVERTOR) : 입력이 반전되어 출력된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/image/220103/NOTgate.png&quot; alt=&quot;drawing&quot; width=&quot;25%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NAND 게이트 : 두 입력 중 하나 이상 0인 경우 1, 나머지는 0이 출력된다.
즉, 두 입력이 모두 1인 경우 0이 출력된다. AND 게이트와 반대의 역할을 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/image/220103/NANDgate.png&quot; alt=&quot;drawing&quot; width=&quot;25%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NOR 게이트(부정논리합) : 두 입력 중 하나 이상 1인 경우 0, 나머지는 1이 출력된다.
즉, 두 입력 모두 0인 경우에 1이 출력된다.
OR 게이트와 반대의 역할을 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/image/220103/NORgate.png&quot; alt=&quot;drawing&quot; width=&quot;25%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;XOR 게이트(배타적 논리합) : 입력이 같을 경우 0, 다를 경우 1이 출력된다. 참 입력의 개수가 홀수일 때 참을 내보낸다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/image/220103/XORgate.png&quot; alt=&quot;drawing&quot; width=&quot;25%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;이진수&quot;&gt;이진수&lt;/h2&gt;

&lt;p&gt;전원이 켜진 상태와 꺼진 상태를 각각 true, false의 형태로 나타낼 수 있으며, 이런 방식을 수학자 조지 부울의 이름을 따서 Boolean 타입이라고 부른다.&lt;br /&gt;
Boolean 타입은 &lt;strong&gt;논리대수의 기본 타입&lt;/strong&gt;이며 동시에 디지털 시스템을 구성하는 하드웨어 및 소프트웨어의 &lt;strong&gt;가장 기본적인 타입&lt;/strong&gt;이다.&lt;br /&gt;
모든 전자부품은 전기의 흐름 유무로 Boolean 타입을 나타낼 수 있으며, 이 개념의 확장으로 모든 10진수 숫자를 2진수 코드로 나타낼 수 있다.&lt;br /&gt;
예시로, 1비트(bit)는 2개(0-1)의 값을 나타낼 수 있고, 2비트는 4개(0-3), 3비트는 8개(0-7)의 값을 나타낼 수 있다. 그리고 이는 각각 2^(비트수)의 형태로 나타난다.&lt;/p&gt;

&lt;h2 id=&quot;반가산기half-adder&quot;&gt;반가산기(half-adder)&lt;/h2&gt;

&lt;p&gt;두 개의 비트를 더하는 과정에서, 결과값을 2비트의 값으로 표현해볼 수 있다.&lt;br /&gt;
&lt;img src=&quot;/image/220103/halfAdder.png&quot; alt=&quot;drawing&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;!-- &lt;div width=&quot;50%&quot;&gt; --&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;+&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;00&lt;/td&gt;
      &lt;td&gt;01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;01&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;!-- &lt;/div&gt; --&gt;

&lt;p&gt;왼쪽과 같이 2비트의 값으로 나타낼 수 있고, 한 비트 내의 두 이진수를 더하면, 두 비트가 되어 각각의 비트를 합(sum)비트, 자리올림(carry)비트라고 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;합비트&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;자리올림비트&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;전가산기full-adder&quot;&gt;전가산기(full-adder)&lt;/h2&gt;

&lt;p&gt;두번째 자리부터는 자리올림이 발생한 경우에 대해서도 더해줘야 하기 때문에, 세 개의 이진수를 더하는 경우에는 두 개의 반가산기 및 OR 게이트를 활용하는 전가산기를 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/220103/fullAdder.png&quot; alt=&quot;drawing&quot; width=&quot;50%&quot; /&gt;
&lt;img src=&quot;/image/220103/fullAdder2.png&quot; alt=&quot;drawing&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;10진법과-2진법&quot;&gt;10진법과 2진법&lt;/h1&gt;

&lt;h2 id=&quot;10진법&quot;&gt;10진법&lt;/h2&gt;

&lt;p&gt;10의 배수의 단위로 숫자를 나누어 나타내는 방법이다. 10단위가 올라갈 때마다 숫자가 증가하는 모습을 보인다.&lt;/p&gt;

&lt;h2 id=&quot;2진법&quot;&gt;2진법&lt;/h2&gt;

&lt;p&gt;2의 배수의 단위로 숫자를 나누어 나타낸다. 2단위가 증가 시 숫자가 올라가게 된다. 가장 작은 단위는 2^0 단위로, 이 한 단위를 비트(bit)로 표현하게 된다.&lt;/p&gt;</content><author><name>JinJeon</name></author><category term="DEV" /><summary type="html">디지털 논리회로란? 이산적인 숫자를 게이트 입력으로 받아, 입력 논리의 필요 조건을 만족, 불만족하는 지에 대해 1 또는 0의 신호로 출력하는 하드웨어 소자이다. 디지털 논리회로의 연결을 통해 컴퓨터의 구성 부품을 만들게 된다. 또한, 논리적 사고를 위한 가장 기본적인 동작으로 프로그래밍 논리 구조와 연결된다. 종류 AND 게이트(논리곱) : 두 입력 모두 1인 경우에만 1, 나머지는 0이 출력된다. OR 게이트(논리합) : 두 입력 중 1이 존재할 경우 1, 아닐 시 0이 출력된다. NOT 게이트(논리부정, INVERTOR) : 입력이 반전되어 출력된다. NAND 게이트 : 두 입력 중 하나 이상 0인 경우 1, 나머지는 0이 출력된다. 즉, 두 입력이 모두 1인 경우 0이 출력된다. AND 게이트와 반대의 역할을 한다. NOR 게이트(부정논리합) : 두 입력 중 하나 이상 1인 경우 0, 나머지는 1이 출력된다. 즉, 두 입력 모두 0인 경우에 1이 출력된다. OR 게이트와 반대의 역할을 한다. XOR 게이트(배타적 논리합) : 입력이 같을 경우 0, 다를 경우 1이 출력된다. 참 입력의 개수가 홀수일 때 참을 내보낸다. 이진수 전원이 켜진 상태와 꺼진 상태를 각각 true, false의 형태로 나타낼 수 있으며, 이런 방식을 수학자 조지 부울의 이름을 따서 Boolean 타입이라고 부른다. Boolean 타입은 논리대수의 기본 타입이며 동시에 디지털 시스템을 구성하는 하드웨어 및 소프트웨어의 가장 기본적인 타입이다. 모든 전자부품은 전기의 흐름 유무로 Boolean 타입을 나타낼 수 있으며, 이 개념의 확장으로 모든 10진수 숫자를 2진수 코드로 나타낼 수 있다. 예시로, 1비트(bit)는 2개(0-1)의 값을 나타낼 수 있고, 2비트는 4개(0-3), 3비트는 8개(0-7)의 값을 나타낼 수 있다. 그리고 이는 각각 2^(비트수)의 형태로 나타난다. 반가산기(half-adder) 두 개의 비트를 더하는 과정에서, 결과값을 2비트의 값으로 표현해볼 수 있다. + 0 1 0 00 01 1 01 10 왼쪽과 같이 2비트의 값으로 나타낼 수 있고, 한 비트 내의 두 이진수를 더하면, 두 비트가 되어 각각의 비트를 합(sum)비트, 자리올림(carry)비트라고 한다. 합비트   0 1 0 0 1 1 1 0 자리올림비트   0 1 0 0 0 1 0 1 전가산기(full-adder) 두번째 자리부터는 자리올림이 발생한 경우에 대해서도 더해줘야 하기 때문에, 세 개의 이진수를 더하는 경우에는 두 개의 반가산기 및 OR 게이트를 활용하는 전가산기를 사용한다. 10진법과 2진법 10진법 10의 배수의 단위로 숫자를 나누어 나타내는 방법이다. 10단위가 올라갈 때마다 숫자가 증가하는 모습을 보인다. 2진법 2의 배수의 단위로 숫자를 나누어 나타낸다. 2단위가 증가 시 숫자가 올라가게 된다. 가장 작은 단위는 2^0 단위로, 이 한 단위를 비트(bit)로 표현하게 된다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/default-social-image.png" /><media:content medium="image" url="http://localhost:4000/assets/default-social-image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">해시 ∙ 해시맵</title><link href="http://localhost:4000/dev/2021/12/11/%ED%95%B4%EC%8B%9C_%ED%95%B4%EC%8B%9C%EB%A7%B5/" rel="alternate" type="text/html" title="해시 ∙ 해시맵" /><published>2021-12-11T00:00:00+09:00</published><updated>2021-12-11T00:00:00+09:00</updated><id>http://localhost:4000/dev/2021/12/11/%ED%95%B4%EC%8B%9C_%ED%95%B4%EC%8B%9C%EB%A7%B5</id><content type="html" xml:base="http://localhost:4000/dev/2021/12/11/%ED%95%B4%EC%8B%9C_%ED%95%B4%EC%8B%9C%EB%A7%B5/">&lt;h1 id=&quot;1-해시hash&quot;&gt;1. 해시(Hash)&lt;/h1&gt;

&lt;h2 id=&quot;1-1-직접-주소-테이블direct-address-table&quot;&gt;1-1. 직접 주소 테이블(Direct Address Table)&lt;/h2&gt;

&lt;p&gt;해시 테이블은 ‘직접 주소 테이블’이라는 자료구조에서 시작된다.&lt;br /&gt;
key와 value를 가지며 &lt;strong&gt;하나의 key에 하나의 value&lt;/strong&gt;가 매칭된다.&lt;br /&gt;
Array에서는 key값에 숫자만 가능함(index). 그러나 Hash Table은 key값에 문자열도 가능하다.&lt;br /&gt;
찾고자 하는 value와 테이블의 index가 일치하므로, 저장된 데이터를 바로 꺼내올 수 있다.&lt;br /&gt;
&lt;strong&gt;시간복잡도 O(1)으로 표현된다.&lt;/strong&gt;&lt;br /&gt;
이진트리검색, linked list와 같은 구조를 쓰게 될 시 특정값의 삭제가 다른 값의 탐색에 영향을 미칠 수가 있는데, map은 그러한 것에서 자유롭다.&lt;br /&gt;
그러나, 단점으로 꼽히는 것이 &lt;strong&gt;‘공간의 효율성’&lt;/strong&gt;이다.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;, 3, &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;, 10, &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;79&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;, 90 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;‘&lt;strong&gt;적재율&lt;/strong&gt;‘로 이러한 공간의 활용도를 표현할 수도 있는데, 위와 같은 경우는 총 95개의 공간 중 3개가 사용되어 &lt;strong&gt;3.15%의 적재율&lt;/strong&gt;이라 볼 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;1-2-해시-테이블과-해시-함수&quot;&gt;1-2. 해시 테이블과 해시 함수&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;해시 함수 : 임의의 길이를 가지는 데이터를 고정된 길이의 데이터로 매핑해주는 함수&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;직접 주소 테이블의 단점을 보완하기 위해 사용할 수 있는 방법이 &lt;strong&gt;해시 테이블&lt;/strong&gt;을 사용하는 것이다.&lt;br /&gt;
해시 테이블의 사용을 위해서 &lt;strong&gt;‘해시 함수’&lt;/strong&gt;를 만들어주게 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;해시 함수의 특징&lt;br /&gt;
해시 함수를 거쳐 나온 값을 통해 value를 추측할 수 없다.&lt;br /&gt;
value를 바로 적용하지 않기 때문에, 예를 들면 ‘100’이라는 숫자에 대해서 100개의 공간을 만든 뒤 값을 배치할 필요가 없어지게 된다.
    &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;위 함수에서 가장 중요한 것은 &lt;strong&gt;‘10’이라는 크기 내로 한정되어진다&lt;/strong&gt;는 것이다.&lt;br /&gt;
Hash Table의 key와 연결된 value를 삽입, 삭제, 탐색하는 알고리즘 함수이다.(대표적으로 MDS)&lt;br /&gt;
key가 들어오면 랜덤한 주소값을 생성한 뒤, 그 주소값으로 설정된 테이블에 key, value를 저장한다.&lt;br /&gt;
해시함수 과정에서 &lt;strong&gt;해시충돌(Collision)&lt;/strong&gt;이 발생할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;2-해시-충돌collision&quot;&gt;2. 해시 충돌(Collision)&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;해시 충돌 : 서로 다른 value를 입력했을 때, 테이블 내 같은 index로 값이 들어가(같은 값이 나오게 되어) 겹치는 상황&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;해시 테이블은 데이터의 개수보다 테이블의 크기를 줄이고자 하는 생각에서 나왔기 때문에, 이에 대한 해결책이 존재한다.&lt;br /&gt;
근본적으로, 해시 함수를 짤 때 가능한 겹치는 값이 나오지 않도록 하는 것이 중요하지만, 결국 겹치는 구간이 존재할 수 밖에 없다.&lt;/p&gt;

&lt;h2 id=&quot;2-1-개방-주소법open-address&quot;&gt;2-1. 개방 주소법(open address)&lt;/h2&gt;

&lt;p&gt;충돌이 발생할 시, 테이블 내 새로운 주소를 탐사한 후, 비어있는 곳에 데이터를 입력하는 방식.&lt;br /&gt;
해시 함수의 결과값 외에 다른 인덱스를 허용한다는 의미로 ‘개방 주소’라고 표현한다.&lt;/p&gt;

&lt;h3 id=&quot;a-선형-탐사법linear-probing&quot;&gt;A. 선형 탐사법(Linear Probing)&lt;/h3&gt;

&lt;p&gt;선형으로 순차적으로 탐사하는 방법.&lt;br /&gt;
충돌이 일어났을 경우, 충돌이 발생한 곳의 바로 옆자리로 배치가 이루어진다.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashingIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashTable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashingIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;getTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myTable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;myTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;myTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [ &amp;lt;1 empty item&amp;gt;, 4, 7 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드에서 입력된 4, 7은 모두 3으로 나눌 때의 나머지 값이 1이므로, index 1에 값이 들어가야 한다.&lt;br /&gt;
 → 4가 이미 배치되어 있어 7은 그 옆 칸으로 이동하여 배치된다.&lt;br /&gt;
문제점 : 값의 주변이 모두 채워지는 &lt;strong&gt;일차 군집화(Primay Clustering)&lt;/strong&gt;가 발생하기 쉽다.&lt;br /&gt;
 → 이로 인해, 옆 칸에 저장되는 데이터가 늘어나고, 그 근처에 새로 저장되려는 값들도 끊임없이 옆으로 새로 이동해 저장되는 문제가 발생한다.&lt;/p&gt;

&lt;h3 id=&quot;b-제곱-탐사법quadratic-probing&quot;&gt;B. 제곱 탐사법(Quadratic Probing)&lt;/h3&gt;

&lt;p&gt;선형 탐사법과 유사한 방식이지만, 탐사의 폭이 제곱으로 늘어난다.&lt;br /&gt;
&lt;strong&gt;충돌의 발생 수의 제곱만큼&lt;/strong&gt; 이동하게 되므로 &lt;strong&gt;‘한 번 충돌 시 1, 두 번 충돌 시 4’&lt;/strong&gt; 이런식으로 늘어나게 된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;3-javascript의-해시테이블hash-table--map&quot;&gt;3. JavaScript의 해시테이블(Hash Table) : Map&lt;/h1&gt;

&lt;p&gt;JavaScript에서의 key-value 자료구조는 Object가 대표적이었는데, Map, Set이 추가되어 현재 JavaScript의 해시테이블은 “Object, Map, Set”가 있다.&lt;/p&gt;

&lt;h2 id=&quot;3-1-map&quot;&gt;3-1. Map&lt;/h2&gt;

&lt;p&gt;key-value로 이루어진 해시 테이블로, Object와 주로 비교된다.&lt;br /&gt;
탐색은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get()&lt;/code&gt;, 삽입은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set()&lt;/code&gt;으로 한다.&lt;br /&gt;
key 값은 고유한 값으로, 하나만 존재할 수 있으며, number, string, function, object, NaN이 자료형으로 사용된다.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set()&lt;/code&gt;을 이용해 value를 설정한다.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testFucntion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testFucntion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
Map(4) {
  1 =&amp;gt; 1,
  &apos;string&apos; =&amp;gt; 2,
  { A: &apos;a&apos; } =&amp;gt; 3,
  [Function (anonymous)] =&amp;gt; 4
}
*/&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// map의 형태&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get()&lt;/code&gt;을 통한 value 가져오기&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testFucntion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has()&lt;/code&gt;를 통한 value 찾기&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testFucntion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete()&lt;/code&gt;를 통한 value 삭제&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testFucntion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testFucntion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// undefined&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size&lt;/code&gt;를 통한 value의 유무 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for-of&lt;/code&gt;를 통한 hash 탐색&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 1 = 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// string = 2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// { A: &apos;a&apos; } = 3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [Function: testFucntion] = 4&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// string&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// { A: &apos;a&apos; }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [Function: testFucntion]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 4&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [Map Iterator] { 1, 2, 3, 4 }&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [Map Iterator] { 1, &apos;string&apos;, { A: &apos;a&apos; }, [Function: testFucntion] }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;4-충돌collision&quot;&gt;4. 충돌(Collision)&lt;/h1&gt;

&lt;p&gt;받아온 key값에 대해 hash function으로 index를 지정하고 넣어주게 되는데, 이미 해당 index에 값이 존재하는 경우가 발생할 수 있으며 이를 &lt;strong&gt;collision&lt;/strong&gt;이라고 한다.&lt;br /&gt;
해결을 위해서 대표적인 두 가지 방법이 존재한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open Addressing&lt;br /&gt;
겹치는 해당 index의 &lt;strong&gt;옆 자리&lt;/strong&gt;에 넣게 되는 방법이다.&lt;br /&gt;
이후에 &lt;strong&gt;해당 자리&lt;/strong&gt;를 찾기 위해서 hash 값 index 이후부터 찾는 key값이 나올 때까지 찾는다.&lt;/li&gt;
  &lt;li&gt;Separate Chainining&lt;br /&gt;
Linked List를 이용해 &lt;strong&gt;다음 링크&lt;/strong&gt;에 끼워넣는 방법이다.&lt;br /&gt;
이후 찾을 때에는 &lt;strong&gt;해당 링크&lt;/strong&gt;를 타고 들어가면 된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;참고-링크&quot;&gt;참고 링크&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;JavaScript Map, Hashmap&lt;br /&gt;
전체적인 설명 : &lt;a href=&quot;https://velog.io/@jun094/Hash%EC%99%80-Map&quot;&gt;https://velog.io/@jun094/Hash와-Map&lt;/a&gt;&lt;br /&gt;
설명 동영상 : &lt;a href=&quot;https://www.youtube.com/watch?v=HraOg7W3VAM&quot;&gt;https://www.youtube.com/watch?v=HraOg7W3VAM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Hashmap 충돌 해결법&lt;br /&gt;
&lt;a href=&quot;https://overcome-the-limits.tistory.com/entry/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%ED%95%B4%EC%8B%9C%ED%85%8C%EC%9D%B4%EB%B8%94-with-JavaScript&quot;&gt;https://overcome-the-limits.tistory.com/entry/자료구조-해시테이블-with-JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;linux&quot;&gt;Linux&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;linux의-특징&quot;&gt;Linux의 특징&lt;/h2&gt;

&lt;p&gt;유닉스 기반의 무료 오픈 소스 운영체제이며, 윈도우와 맥과 가장 구별되는 점으로 &lt;strong&gt;‘오픈 소스’&lt;/strong&gt;를 꼽을 수 있다.&lt;br /&gt;
커스터마이즈된 OS를 만들 수 있는 커널로, Linux 커널을 기반으로 하며, 커널은 운영 체제의 핵심이라고 할 수 있다.
즉, 이 커널로 자신의 운영 체제를 개발할 수 있다.&lt;br /&gt;
Linux 아키텍처는 커널, 시스템 라이브러리, 시스템 도구와 같은 구성 요소로 이루어진다.&lt;/p&gt;</content><author><name>JinJeon</name></author><category term="DEV" /><summary type="html">1. 해시(Hash) 1-1. 직접 주소 테이블(Direct Address Table) 해시 테이블은 ‘직접 주소 테이블’이라는 자료구조에서 시작된다. key와 value를 가지며 하나의 key에 하나의 value가 매칭된다. Array에서는 key값에 숫자만 가능함(index). 그러나 Hash Table은 key값에 문자열도 가능하다. 찾고자 하는 value와 테이블의 index가 일치하므로, 저장된 데이터를 바로 꺼내올 수 있다. 시간복잡도 O(1)으로 표현된다. 이진트리검색, linked list와 같은 구조를 쓰게 될 시 특정값의 삭제가 다른 값의 탐색에 영향을 미칠 수가 있는데, map은 그러한 것에서 자유롭다. 그러나, 단점으로 꼽히는 것이 ‘공간의 효율성’이다. [ &amp;lt;3 empty items&amp;gt;, 3, &amp;lt;6 empty items&amp;gt;, 10, &amp;lt;79 empty items&amp;gt;, 90 ] ‘적재율‘로 이러한 공간의 활용도를 표현할 수도 있는데, 위와 같은 경우는 총 95개의 공간 중 3개가 사용되어 3.15%의 적재율이라 볼 수 있다. 1-2. 해시 테이블과 해시 함수 해시 함수 : 임의의 길이를 가지는 데이터를 고정된 길이의 데이터로 매핑해주는 함수 직접 주소 테이블의 단점을 보완하기 위해 사용할 수 있는 방법이 해시 테이블을 사용하는 것이다. 해시 테이블의 사용을 위해서 ‘해시 함수’를 만들어주게 된다. 해시 함수의 특징 해시 함수를 거쳐 나온 값을 통해 value를 추측할 수 없다. value를 바로 적용하지 않기 때문에, 예를 들면 ‘100’이라는 숫자에 대해서 100개의 공간을 만든 뒤 값을 배치할 필요가 없어지게 된다. function hashFunction(key) { return key % 10; } 위 함수에서 가장 중요한 것은 ‘10’이라는 크기 내로 한정되어진다는 것이다. Hash Table의 key와 연결된 value를 삽입, 삭제, 탐색하는 알고리즘 함수이다.(대표적으로 MDS) key가 들어오면 랜덤한 주소값을 생성한 뒤, 그 주소값으로 설정된 테이블에 key, value를 저장한다. 해시함수 과정에서 해시충돌(Collision)이 발생할 수 있다. 2. 해시 충돌(Collision) 해시 충돌 : 서로 다른 value를 입력했을 때, 테이블 내 같은 index로 값이 들어가(같은 값이 나오게 되어) 겹치는 상황 해시 테이블은 데이터의 개수보다 테이블의 크기를 줄이고자 하는 생각에서 나왔기 때문에, 이에 대한 해결책이 존재한다. 근본적으로, 해시 함수를 짤 때 가능한 겹치는 값이 나오지 않도록 하는 것이 중요하지만, 결국 겹치는 구간이 존재할 수 밖에 없다. 2-1. 개방 주소법(open address) 충돌이 발생할 시, 테이블 내 새로운 주소를 탐사한 후, 비어있는 곳에 데이터를 입력하는 방식. 해시 함수의 결과값 외에 다른 인덱스를 허용한다는 의미로 ‘개방 주소’라고 표현한다. A. 선형 탐사법(Linear Probing) 선형으로 순차적으로 탐사하는 방법. 충돌이 일어났을 경우, 충돌이 발생한 곳의 바로 옆자리로 배치가 이루어진다. const hashingIndex = function (number) { const result = number % 3; return result; }; class hashTable { constructor() { this.table = []; } setValue(value = -1) { const index = hashingIndex(value); if (this.table[index]) { this.table[index + 1] = value; } else { this.table[index] = value; } } getTable() { return this.table; } } const myTable = new hashTable(); myTable.setValue(4); myTable.setValue(7); console.log(myTable.getTable()); // [ &amp;lt;1 empty item&amp;gt;, 4, 7 ] 위 코드에서 입력된 4, 7은 모두 3으로 나눌 때의 나머지 값이 1이므로, index 1에 값이 들어가야 한다. → 4가 이미 배치되어 있어 7은 그 옆 칸으로 이동하여 배치된다. 문제점 : 값의 주변이 모두 채워지는 일차 군집화(Primay Clustering)가 발생하기 쉽다. → 이로 인해, 옆 칸에 저장되는 데이터가 늘어나고, 그 근처에 새로 저장되려는 값들도 끊임없이 옆으로 새로 이동해 저장되는 문제가 발생한다. B. 제곱 탐사법(Quadratic Probing) 선형 탐사법과 유사한 방식이지만, 탐사의 폭이 제곱으로 늘어난다. 충돌의 발생 수의 제곱만큼 이동하게 되므로 ‘한 번 충돌 시 1, 두 번 충돌 시 4’ 이런식으로 늘어나게 된다. 3. JavaScript의 해시테이블(Hash Table) : Map JavaScript에서의 key-value 자료구조는 Object가 대표적이었는데, Map, Set이 추가되어 현재 JavaScript의 해시테이블은 “Object, Map, Set”가 있다. 3-1. Map key-value로 이루어진 해시 테이블로, Object와 주로 비교된다. 탐색은 get(), 삽입은 set()으로 한다. key 값은 고유한 값으로, 하나만 존재할 수 있으며, number, string, function, object, NaN이 자료형으로 사용된다. set()을 이용해 value를 설정한다. let map = new Map(); let testNumber = 1; let testString = &quot;string&quot;; let testObject = { A: &quot;a&quot; }; let testFucntion = (B) =&amp;gt; { B = &quot;b&quot;; }; map.set(testNumber, 1); map.set(testString, 2); map.set(testObject, 3); map.set(testFucntion, 4); console.log(map); /* Map(4) { 1 =&amp;gt; 1, &apos;string&apos; =&amp;gt; 2, { A: &apos;a&apos; } =&amp;gt; 3, [Function (anonymous)] =&amp;gt; 4 } */ // map의 형태 get()을 통한 value 가져오기 map.get(testNumber); // 1 map.get(testString); // 2 map.get(testObject); // 3 map.get(testFucntion); // 4 has()를 통한 value 찾기 map.has(testFucntion); // true map.has(testNumber); // true delete()를 통한 value 삭제 map.delete(testFucntion); // true map.get(testFucntion); // undefined map.get(&quot;none&quot;); // undefined size를 통한 value의 유무 확인 map.size; // 3 map.length; // undefined for-of를 통한 hash 탐색 for (let [key, value] of map) { console.log(key, &quot;=&quot;, value); } // 1 = 1 // string = 2 // { A: &apos;a&apos; } = 3 // [Function: testFucntion] = 4 for (let key of map.keys()) { console.log(key); } // 1 // string // { A: &apos;a&apos; } // [Function: testFucntion] for (let value of map.values()) { console.log(value); } // 1 // 2 // 3 // 4 console.log(map.values()); // [Map Iterator] { 1, 2, 3, 4 } console.log(map.keys()); // [Map Iterator] { 1, &apos;string&apos;, { A: &apos;a&apos; }, [Function: testFucntion] } 4. 충돌(Collision) 받아온 key값에 대해 hash function으로 index를 지정하고 넣어주게 되는데, 이미 해당 index에 값이 존재하는 경우가 발생할 수 있으며 이를 collision이라고 한다. 해결을 위해서 대표적인 두 가지 방법이 존재한다. Open Addressing 겹치는 해당 index의 옆 자리에 넣게 되는 방법이다. 이후에 해당 자리를 찾기 위해서 hash 값 index 이후부터 찾는 key값이 나올 때까지 찾는다. Separate Chainining Linked List를 이용해 다음 링크에 끼워넣는 방법이다. 이후 찾을 때에는 해당 링크를 타고 들어가면 된다. 참고 링크 JavaScript Map, Hashmap 전체적인 설명 : https://velog.io/@jun094/Hash와-Map 설명 동영상 : https://www.youtube.com/watch?v=HraOg7W3VAM Hashmap 충돌 해결법 https://overcome-the-limits.tistory.com/entry/자료구조-해시테이블-with-JavaScript Linux Linux의 특징 유닉스 기반의 무료 오픈 소스 운영체제이며, 윈도우와 맥과 가장 구별되는 점으로 ‘오픈 소스’를 꼽을 수 있다. 커스터마이즈된 OS를 만들 수 있는 커널로, Linux 커널을 기반으로 하며, 커널은 운영 체제의 핵심이라고 할 수 있다. 즉, 이 커널로 자신의 운영 체제를 개발할 수 있다. Linux 아키텍처는 커널, 시스템 라이브러리, 시스템 도구와 같은 구성 요소로 이루어진다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/default-social-image.png" /><media:content medium="image" url="http://localhost:4000/assets/default-social-image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">동기 ∙ 비동기</title><link href="http://localhost:4000/dev/2021/12/01/%EB%8F%99%EA%B8%B0_%EB%B9%84%EB%8F%99%EA%B8%B0/" rel="alternate" type="text/html" title="동기 ∙ 비동기" /><published>2021-12-01T00:00:00+09:00</published><updated>2021-12-01T00:00:00+09:00</updated><id>http://localhost:4000/dev/2021/12/01/%EB%8F%99%EA%B8%B0_%EB%B9%84%EB%8F%99%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/dev/2021/12/01/%EB%8F%99%EA%B8%B0_%EB%B9%84%EB%8F%99%EA%B8%B0/">&lt;h2 id=&quot;1-동기synchronous&quot;&gt;1. 동기(synchronous)&lt;/h2&gt;

&lt;p&gt;자바스크립트는 한 번에 하나의 작업만 수행한다.&lt;br /&gt;
‘동기’라는 상황은 쉽게 말해, 한 작업이 실행되는 동안 다른 작업은 실행되지 않고 기다리는 것이다.&lt;br /&gt;
이러한 자바스크립트의 특성은 그 엔진의 주요 구성 요소로 인해 나타나며, 그 종류로는 &lt;strong&gt;Memory Heap, Call Stack&lt;/strong&gt;이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Memory Heap : 변수, 객체의 메모리 할당을 담당한다.&lt;/li&gt;
  &lt;li&gt;Call Stack : 호출된 함수가 쌓이는 곳을 의미한다. stack이라는 단어에서 알 수 있듯, LIFO(Last in First Out)의 구조로 이루어져 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-1-call-stack&quot;&gt;1-1. CALL STACK&lt;/h3&gt;

&lt;p&gt;함수 내의 다른 함수를 실행하는 경우, 이를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debugger&lt;/code&gt;를 통해 보면 아래와 같이 &lt;strong&gt;callstack&lt;/strong&gt;이 쌓여있는 것을 볼 수 있다.&lt;br /&gt;
이는 함수의 실행 순서를 &lt;strong&gt;stack&lt;/strong&gt;의 형태로 표현한 것인데, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt;내에 있는 함수 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar&lt;/code&gt;가 먼저 실행을 다 마쳐야 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt;가 다시 진행되는 것을 알 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baseData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;baseData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sync &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;baseData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;debugger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sync 2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;2-비동기asynchronous&quot;&gt;2. 비동기(asynchronous)&lt;/h2&gt;

&lt;p&gt;자바스크립트의 단일 스레드, 동기식 동작과 달리, &lt;strong&gt;어떠한 요청을 보내면 그 요청이 끝나기 전에 바로 다음 동작이 진행되는 것&lt;/strong&gt;을 말한다.&lt;br /&gt;
동기식으로만 진행되는 경우, 하나의 작업에 많은 시간이 걸리게 되면, 다음 동작들이 모두 영향을 받게 되어 전체적인 속도가 느려지게 되고, 이는 매우 비효율적인 것으로 볼 수 있다.&lt;br /&gt;
이러한 작업의 비효율성을 줄이기 위해 나타난 방식이 &lt;strong&gt;비동기 방식&lt;/strong&gt;이다.&lt;/p&gt;

&lt;h3 id=&quot;2-1-여러-이벤트의-동시-동작-원리&quot;&gt;2-1. 여러 이벤트의 동시 동작 원리&lt;/h3&gt;

&lt;p&gt;자바스크립트의 기본 동작 원리로는 안되는 비동기는 &lt;strong&gt;자바스크립트의 실행 환경(runtime)&lt;/strong&gt;을 통해 이루어낼 수 있다.&lt;br /&gt;
&lt;strong&gt;브라우저&lt;/strong&gt;가 바로 그 환경인데, 여기서는 DOM, AJAX와 같은 비동기를 위한 &lt;strong&gt;web API&lt;/strong&gt;가 들어가있어 비동기 작업을 해낼 수 있다.&lt;br /&gt;
더불어, 이것들의 제어를 위한 &lt;strong&gt;Event Loop, Callback Queue&lt;/strong&gt;가 존재한다.&lt;/p&gt;

&lt;h3 id=&quot;2-2-비동기의-동작-순서&quot;&gt;2-2. 비동기의 동작 순서&lt;/h3&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;FIRST&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;THIRD&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;SECOND&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*
THIS IS FIRST
THIS IS SECOND
THIRD
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;우선 위 코드들을 실행함으로서, ‘first → setTimeout() → second’ 의 순서로 내용들이 진행된다.&lt;br /&gt;
위 코드에서 setTimeout은 &lt;strong&gt;web API(브라우저의 제공 API)&lt;/strong&gt;로, 자바스크립트의 런타임 환경에서 별도의 API로 존재한다.&lt;br /&gt;
API가 실행되게 되면, stack에서 우선 실행되는데, 이는 호출을 시킨다는 의미로 호출 후 stack에서는 사라지게 된다.&lt;br /&gt;
그리고 이 API는 &lt;strong&gt;작성된 코드의 중간에 갑자기 끼어들어서는 안 된다.&lt;/strong&gt;&lt;br /&gt;
실행이 완료된 모든 WEB API는 &lt;strong&gt;task queue&lt;/strong&gt;에 들어가서 대기하게 된다.&lt;br /&gt;
&lt;strong&gt;event loop&lt;/strong&gt;가 call stack과 task queue를 지속적으로 주시하는데, stack이 비어있게 되면, 첫 번째 실행될 API부터 순차적으로 가져와 실행하게 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;동기 ∙ 비동기 상황에 대한 다른 예시&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;result :&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
result : 1
2
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 예시에서, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log&lt;/code&gt;가 마무리 된 후에 API가 진행된 것을 볼 수 있다.&lt;br /&gt;
이를 통해, API는 모든 stack내의 내용들이 정리된 후에 &lt;strong&gt;event loop&lt;/strong&gt;를 통해서 진행됨을 알 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;3-비동기의-예시&quot;&gt;3. 비동기의 예시&lt;/h2&gt;

&lt;h3 id=&quot;3-1-for-settimeout&quot;&gt;3-1. for, setTimeout()&lt;/h3&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baseData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;asyncRun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;asyncRun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;baseData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 7 7 7 7 7 7 7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드를 보면, 원래의 의도(0 1 2 3 4 5 6)와 달리 &lt;strong&gt;7&lt;/strong&gt;이 계속 출력된 것을 볼 수 있다.&lt;br /&gt;
이는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt;가 가진 특징 때문인데, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt;는 함수레벨 스코프를 가지며, &lt;strong&gt;전역변수의 값이 변경&lt;/strong&gt;될 수 있게 된다.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baseData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;asyncRun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 7&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;asyncRun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;baseData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 7 7 7 7 7 7 7 7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드를 보면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var i = 2;&lt;/code&gt;로 값을 지정해준 상태에서, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asyncRun&lt;/code&gt; 함수 안에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log&lt;/code&gt;가 이루어지기 때문에, 값이 &lt;strong&gt;2&lt;/strong&gt;로 나와야 한다.&lt;br /&gt;
그러나, for문 내의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var i = 0&lt;/code&gt;을 통해서 값이 재지정되었기 때문에 &lt;strong&gt;7&lt;/strong&gt;이라는 값이 나오게 된다.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout()&lt;/code&gt;역시 이미 1초보다 훨씬 이전에 처리된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt;의 값으로 처리가 진행되기 때문에 &lt;strong&gt;7&lt;/strong&gt;만 나오게 된다.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baseData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;asyncRun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// var를 let으로 변경&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;asyncRun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;baseData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 2 0 1 2 3 4 5 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이와 달리, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt;은 블록레벨 스코프를 가져, 함수, if문, while문 등 &lt;strong&gt;중괄호로 된 곳내에서만&lt;/strong&gt; 작동한다.&lt;br /&gt;
실행 시 1차적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt;문 밖 i의 값이 &lt;strong&gt;2&lt;/strong&gt;로 제대로 출력되는 것을 볼 수 있고, 내부에서도 원래 의도대로 출력되는 것을 볼 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;3-2-foreach&quot;&gt;3-2. forEach&lt;/h3&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baseData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;asyncRun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;asyncRun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;baseData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 0 1 2 3 4 5 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forEach&lt;/code&gt;로 실행할 시에는 따로 영향받는 요소 없이 지정한 시간 뒤에 모두 제대로 실행되는 것을 볼 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;3-3-비동기--비동기&quot;&gt;3-3. 비동기 + 비동기&lt;/h3&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baseData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;asyncRun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cb 2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cb 1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;asyncRun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;baseData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*
cb 1
cb 1
cb 1
cb 1
cb 1
cb 1
cb 1
cb 2
0
cb 2
1
cb 2
2
cb 2
3
cb 2
4
cb 2
5
cb 2
6
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;비동기 내에 또다른 비동기적인 함수를 넣게 되는 경우에는 &lt;strong&gt;우선적으로 들어온 함수를 처리&lt;/strong&gt;하고, 그 다음 들어온 함수의 순서대로 처리되는 것을 볼 수 있다.&lt;br /&gt;
이를 통해, &lt;strong&gt;TASK QUEUE에서 QUEUE의 의미&lt;/strong&gt;를 다시 알 수 있다.&lt;/p&gt;</content><author><name>JinJeon</name></author><category term="DEV" /><summary type="html">1. 동기(synchronous) 자바스크립트는 한 번에 하나의 작업만 수행한다. ‘동기’라는 상황은 쉽게 말해, 한 작업이 실행되는 동안 다른 작업은 실행되지 않고 기다리는 것이다. 이러한 자바스크립트의 특성은 그 엔진의 주요 구성 요소로 인해 나타나며, 그 종류로는 Memory Heap, Call Stack이 있다. Memory Heap : 변수, 객체의 메모리 할당을 담당한다. Call Stack : 호출된 함수가 쌓이는 곳을 의미한다. stack이라는 단어에서 알 수 있듯, LIFO(Last in First Out)의 구조로 이루어져 있다. 1-1. CALL STACK 함수 내의 다른 함수를 실행하는 경우, 이를 debugger를 통해 보면 아래와 같이 callstack이 쌓여있는 것을 볼 수 있다. 이는 함수의 실행 순서를 stack의 형태로 표현한 것인데, foo내에 있는 함수 bar가 먼저 실행을 다 마쳐야 foo가 다시 진행되는 것을 알 수 있다. const baseData = [1, 2, 3, 4, 5, 6, 100]; function foo() { baseData.forEach((v, i) =&amp;gt; { console.log(&quot;sync &quot;, i); bar(); }); } function bar() { baseData.forEach((v, i) =&amp;gt; { debugger; console.log(&quot;sync 2&quot;, i); }); } foo(); 2. 비동기(asynchronous) 자바스크립트의 단일 스레드, 동기식 동작과 달리, 어떠한 요청을 보내면 그 요청이 끝나기 전에 바로 다음 동작이 진행되는 것을 말한다. 동기식으로만 진행되는 경우, 하나의 작업에 많은 시간이 걸리게 되면, 다음 동작들이 모두 영향을 받게 되어 전체적인 속도가 느려지게 되고, 이는 매우 비효율적인 것으로 볼 수 있다. 이러한 작업의 비효율성을 줄이기 위해 나타난 방식이 비동기 방식이다. 2-1. 여러 이벤트의 동시 동작 원리 자바스크립트의 기본 동작 원리로는 안되는 비동기는 자바스크립트의 실행 환경(runtime)을 통해 이루어낼 수 있다. 브라우저가 바로 그 환경인데, 여기서는 DOM, AJAX와 같은 비동기를 위한 web API가 들어가있어 비동기 작업을 해낼 수 있다. 더불어, 이것들의 제어를 위한 Event Loop, Callback Queue가 존재한다. 2-2. 비동기의 동작 순서 console.log(&quot;FIRST&quot;); setTimeout(() =&amp;gt; console.log(&quot;THIRD&quot;), 5000); console.log(&quot;SECOND&quot;); /* THIS IS FIRST THIS IS SECOND THIRD */ 우선 위 코드들을 실행함으로서, ‘first → setTimeout() → second’ 의 순서로 내용들이 진행된다. 위 코드에서 setTimeout은 web API(브라우저의 제공 API)로, 자바스크립트의 런타임 환경에서 별도의 API로 존재한다. API가 실행되게 되면, stack에서 우선 실행되는데, 이는 호출을 시킨다는 의미로 호출 후 stack에서는 사라지게 된다. 그리고 이 API는 작성된 코드의 중간에 갑자기 끼어들어서는 안 된다. 실행이 완료된 모든 WEB API는 task queue에 들어가서 대기하게 된다. event loop가 call stack과 task queue를 지속적으로 주시하는데, stack이 비어있게 되면, 첫 번째 실행될 API부터 순차적으로 가져와 실행하게 된다. 동기 ∙ 비동기 상황에 대한 다른 예시 function plus() { let a = 1; setTimeout(() =&amp;gt; console.log(++a), 1000); return a; } const result = plus(); console.log(&quot;result :&quot;, result); /* result : 1 2 */ 위 예시에서, console.log가 마무리 된 후에 API가 진행된 것을 볼 수 있다. 이를 통해, API는 모든 stack내의 내용들이 정리된 후에 event loop를 통해서 진행됨을 알 수 있다. 3. 비동기의 예시 3-1. for, setTimeout() const baseData = [1, 2, 3, 4, 5, 6, 100]; const asyncRun = (arr, fn) =&amp;gt; { for (var i = 0; i &amp;lt; arr.length; i++) { setTimeout(() =&amp;gt; fn(i), 1000); } }; asyncRun(baseData, (idx) =&amp;gt; console.log(idx)); // 7 7 7 7 7 7 7 위 코드를 보면, 원래의 의도(0 1 2 3 4 5 6)와 달리 7이 계속 출력된 것을 볼 수 있다. 이는 var가 가진 특징 때문인데, var는 함수레벨 스코프를 가지며, 전역변수의 값이 변경될 수 있게 된다. const baseData = [1, 2, 3, 4, 5, 6, 100]; var i = 2; const asyncRun = (arr, fn) =&amp;gt; { for (var i = 0; i &amp;lt; arr.length; i++) { setTimeout(() =&amp;gt; fn(i), 1000); } console.log(i); // 7 }; asyncRun(baseData, (idx) =&amp;gt; console.log(idx)); // 7 7 7 7 7 7 7 7 위 코드를 보면, var i = 2;로 값을 지정해준 상태에서, asyncRun 함수 안에서 console.log가 이루어지기 때문에, 값이 2로 나와야 한다. 그러나, for문 내의 var i = 0을 통해서 값이 재지정되었기 때문에 7이라는 값이 나오게 된다. setTimeout()역시 이미 1초보다 훨씬 이전에 처리된 i의 값으로 처리가 진행되기 때문에 7만 나오게 된다. const baseData = [1, 2, 3, 4, 5, 6, 100]; var i = 2; const asyncRun = (arr, fn) =&amp;gt; { for (let i = 0; i &amp;lt; arr.length; i++) { // var를 let으로 변경 setTimeout(() =&amp;gt; fn(i), 1000); } console.log(i); // 2 }; asyncRun(baseData, (idx) =&amp;gt; console.log(idx)); // 2 0 1 2 3 4 5 6 이와 달리, let은 블록레벨 스코프를 가져, 함수, if문, while문 등 중괄호로 된 곳내에서만 작동한다. 실행 시 1차적으로 for문 밖 i의 값이 2로 제대로 출력되는 것을 볼 수 있고, 내부에서도 원래 의도대로 출력되는 것을 볼 수 있다. 3-2. forEach const baseData = [1, 2, 3, 4, 5, 6, 100]; const asyncRun = (arr, fn) =&amp;gt; { arr.forEach((v, i) =&amp;gt; { setTimeout(() =&amp;gt; fn(i), 1000); }); }; asyncRun(baseData, (idx) =&amp;gt; console.log(idx)); // 0 1 2 3 4 5 6 forEach로 실행할 시에는 따로 영향받는 요소 없이 지정한 시간 뒤에 모두 제대로 실행되는 것을 볼 수 있다. 3-3. 비동기 + 비동기 const baseData = [1, 2, 3, 4, 5, 6, 100]; const asyncRun = (arr, fn) =&amp;gt; { arr.forEach((v, i) =&amp;gt; { setTimeout(() =&amp;gt; { setTimeout(() =&amp;gt; { console.log(&quot;cb 2&quot;); fn(i); }, 1000); console.log(&quot;cb 1&quot;); }, 1000); }); }; asyncRun(baseData, (idx) =&amp;gt; console.log(idx)); /* cb 1 cb 1 cb 1 cb 1 cb 1 cb 1 cb 1 cb 2 0 cb 2 1 cb 2 2 cb 2 3 cb 2 4 cb 2 5 cb 2 6 */ 비동기 내에 또다른 비동기적인 함수를 넣게 되는 경우에는 우선적으로 들어온 함수를 처리하고, 그 다음 들어온 함수의 순서대로 처리되는 것을 볼 수 있다. 이를 통해, TASK QUEUE에서 QUEUE의 의미를 다시 알 수 있다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/default-social-image.png" /><media:content medium="image" url="http://localhost:4000/assets/default-social-image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">ALEMBIC</title><link href="http://localhost:4000/guide/2021/12/01/guide/" rel="alternate" type="text/html" title="ALEMBIC" /><published>2021-12-01T00:00:00+09:00</published><updated>2021-12-01T00:00:00+09:00</updated><id>http://localhost:4000/guide/2021/12/01/guide</id><content type="html" xml:base="http://localhost:4000/guide/2021/12/01/guide/">&lt;p&gt;Alembic is a starting point for &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; projects. Rather than starting from scratch, this boilerplate is designed to get rolling immediately. Install it, configure it, tweak it, push it.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;button&quot; href=&quot;https://github.com/daviddarnes/alembic&quot; style=&quot;background: #0366d6&quot;&gt;Fork it  &lt;svg width=&quot;16&quot; height=&quot;16&quot; class=&quot;icon  icon--github&quot; role=&quot;img&quot; alt=&quot;github&quot;&gt;&lt;title&gt;github&lt;/title&gt;&lt;use xlink:href=&quot;#github&quot; fill=&quot;CurrentColor&quot;&gt;&lt;/use&gt;&lt;/svg&gt;
&lt;/a&gt;
 &lt;a class=&quot;button&quot; href=&quot;https://buymeacoffee.com/daviddarnes#support&quot; style=&quot;background: #f68140&quot;&gt;Buy me a coffee ☕️&lt;/a&gt;
 &lt;a class=&quot;button&quot; href=&quot;https://twitter.com/intent/tweet/?url=https://alembic.darn.es&amp;amp;text=Alembic%20-%20A%20Jekyll%20boilerplate%20theme&amp;amp;via=DavidDarnes&quot; style=&quot;background: #0d94e7&quot;&gt;Tweet it  &lt;svg width=&quot;16&quot; height=&quot;16&quot; class=&quot;icon  icon--twitter&quot; role=&quot;img&quot; alt=&quot;twitter&quot;&gt;&lt;title&gt;twitter&lt;/title&gt;&lt;use xlink:href=&quot;#twitter&quot; fill=&quot;CurrentColor&quot;&gt;&lt;/use&gt;&lt;/svg&gt;
&lt;/a&gt;
 &lt;a class=&quot;button&quot; href=&quot;https://github.com/daviddarnes/alembic#installation&quot;&gt;Install Alembic ⚗️&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Clear and elegant design that can be used out of the box or as solid starting point&lt;/li&gt;
  &lt;li&gt;Tested in all major browsers, including &lt;strong&gt;IE and Edge&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Built in &lt;strong&gt;Service Worker&lt;/strong&gt; so it can work offline and on slow connections&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Configurable colours&lt;/strong&gt; and typography in a single settings file&lt;/li&gt;
  &lt;li&gt;Extensive set of &lt;strong&gt;shortcodes&lt;/strong&gt; to include various elements; such as buttons, icons, figure images and more&lt;/li&gt;
  &lt;li&gt;Solid &lt;strong&gt;typographic framework&lt;/strong&gt; from &lt;a href=&quot;https://sassline.com/&quot;&gt;Sassline&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Configurable navigation via a single file&lt;/li&gt;
  &lt;li&gt;Modular Jekyll components&lt;/li&gt;
  &lt;li&gt;Post category support in the form of a single post index page grouped by category&lt;/li&gt;
  &lt;li&gt;Built in live search using JavaScript&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Contact form&lt;/strong&gt; built in using &lt;a href=&quot;https://formspree.io/&quot;&gt;Formspree&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Designed with &lt;strong&gt;&lt;a href=&quot;https://www.siteleaf.com/&quot;&gt;Siteleaf&lt;/a&gt;&lt;/strong&gt; in mind&lt;/li&gt;
  &lt;li&gt;Has 9 of the most popular networks as performant sharing buttons&lt;/li&gt;
  &lt;li&gt;Has documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;p&gt;Here are a few examples of Alembic out in the wild being used in a variety of ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bawejakunal.github.io/&quot;&gt;bawejakunal.github.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://case2111.github.io/&quot;&gt;case2111.github.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.karateca.org/&quot;&gt;karateca.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;h3 id=&quot;quick-setup&quot;&gt;Quick setup&lt;/h3&gt;

&lt;p&gt;To give you a running start I’ve put together some starter kits that you can download, fork or even deploy immediately:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;⚗️🍨 Vanilla Jekyll starter kit&lt;br /&gt;
&lt;a href=&quot;https://app.netlify.com/start/deploy?repository=https://github.com/daviddarnes/alembic-kit&quot; style=&quot;background: none&quot;&gt;&lt;img src=&quot;https://www.netlify.com/img/deploy/button.svg&quot; alt=&quot;Deploy to Netlify&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;⚗️🌲 Forestry starter kit&lt;br /&gt;
&lt;a href=&quot;https://app.forestry.io/quick-start?repo=daviddarnes/alembic-forestry-kit&amp;amp;engine=jekyll&quot; style=&quot;background: none&quot;&gt;&lt;img src=&quot;https://assets.forestry.io/import-to-forestry.svg&quot; alt=&quot;Deploy to Forestry&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://app.netlify.com/start/deploy?repository=https://github.com/daviddarnes/alembic-forestry-kit&quot; style=&quot;background: none&quot;&gt;&lt;img src=&quot;https://www.netlify.com/img/deploy/button.svg&quot; alt=&quot;Deploy to Netlify&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;⚗️💠 Netlify CMS starter kit&lt;br /&gt;
&lt;a href=&quot;https://app.netlify.com/start/deploy?repository=https://github.com/daviddarnes/alembic-netlifycms-kit&amp;amp;stack=cms&quot; style=&quot;background: none&quot;&gt;&lt;img src=&quot;https://www.netlify.com/img/deploy/button.svg&quot; alt=&quot;Deploy to Netlify&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;⚗️:octocat: GitHub Pages with remote theme kit&lt;br /&gt;
&lt;a class=&quot;button&quot; href=&quot;https://github.com/daviddarnes/alembic-kit/archive/remote-theme.zip&quot; style=&quot;background: #24292e&quot;&gt;Download kit&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;⚗️🚀 Stackbit starter kit&lt;br /&gt;
&lt;a href=&quot;https://app.stackbit.com/create?theme=https://github.com/daviddarnes/alembic-stackbit-kit&quot; style=&quot;background: none&quot;&gt;&lt;img src=&quot;https://assets.stackbit.com/badge/create-with-stackbit.svg&quot; alt=&quot;Create with Stackbit&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;as-a-jekyll-theme&quot;&gt;As a Jekyll theme&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;alembic-jekyll-theme&quot;&lt;/code&gt; to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; to add the theme as a dependancy&lt;/li&gt;
  &lt;li&gt;Run the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; in the root of project to install the theme and its dependancies&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;theme: alembic-jekyll-theme&lt;/code&gt; to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file to set the site theme&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; to build and serve your site&lt;/li&gt;
  &lt;li&gt;Done! Use the &lt;a href=&quot;#configuration&quot;&gt;configuration&lt;/a&gt; documentation and the example &lt;a href=&quot;https://github.com/daviddarnes/alembic/blob/master/_config.yml&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/a&gt; file to set things like the navigation, contact form and social sharing buttons&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;as-a-github-pages-remote-theme&quot;&gt;As a GitHub Pages remote theme&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;jekyll-remote-theme&quot;&lt;/code&gt; to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; to add the theme as a dependancy&lt;/li&gt;
  &lt;li&gt;Run the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; in the root of project to install the jekyll remote theme gem as a dependancy&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-remote-theme&lt;/code&gt; to the list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugins&lt;/code&gt; in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remote_theme: daviddarnes/alembic@main&lt;/code&gt; to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file to set the site theme&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; to build and serve your site&lt;/li&gt;
  &lt;li&gt;Done! Use the &lt;a href=&quot;#configuration&quot;&gt;configuration&lt;/a&gt; documentation and the example &lt;a href=&quot;https://github.com/daviddarnes/alembic/blob/master/_config.yml&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/a&gt; file to set things like the navigation, contact form and social sharing buttons&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;as-a-boilerplate--fork&quot;&gt;As a Boilerplate / Fork&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;(deprecated, not recommended)&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/daviddarnes/alembic#fork-destination-box&quot;&gt;Fork the repo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Replace the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; with one stating all the gems used in your project&lt;/li&gt;
  &lt;li&gt;Delete the following unnecessary files/folders: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LICENSE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screenshot.png&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alembic-jekyll-theme.gemspec&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; in the root of project to install the jekyll remote theme gem as a dependancy&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; to build and serve your site&lt;/li&gt;
  &lt;li&gt;Done! Use the &lt;a href=&quot;#configuration&quot;&gt;configuration&lt;/a&gt; documentation and the example &lt;a href=&quot;https://github.com/daviddarnes/alembic/blob/master/_config.yml&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/a&gt; file to set things like the navigation, contact form and social sharing buttons&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;customising&quot;&gt;Customising&lt;/h2&gt;

&lt;p&gt;When using Alembic as a theme means you can take advantage of the file overriding method. This allows you to overwrite any file in this theme with your own custom file, by matching the file name and path. The most common example of this would be if you want to add your own styles or change the core style settings.&lt;/p&gt;

&lt;p&gt;To add your own styles copy the &lt;a href=&quot;https://github.com/daviddarnes/alembic/blob/master/assets/styles.scss&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;styles.scss&lt;/code&gt;&lt;/a&gt; into your own project with the same file path (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets/styles.scss&lt;/code&gt;). From there you can add your own styles, you can even optionally ignore the theme styles by removing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@import &quot;alembic&quot;;&lt;/code&gt; line.&lt;/p&gt;

&lt;p&gt;If you’re looking to set your own colours and fonts you can overwrite them by matching the variable names from the &lt;a href=&quot;https://github.com/daviddarnes/alembic/blob/master/_sass/_settings.scss&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_settings.scss&lt;/code&gt;&lt;/a&gt; file in your own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;styles.scss&lt;/code&gt;, make sure to state them before the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@import &quot;alembic&quot;;&lt;/code&gt; line so they take effect. The settings are a mixture of custom variables and settings from &lt;a href=&quot;https://medium.com/@jakegiltsoff/sassline-v2-0-e424b2881e7e&quot;&gt;Sassline&lt;/a&gt; - follow the link to find out how to configure the typographic settings.&lt;/p&gt;</content><author><name>JinJeon</name></author><category term="GUIDE" /><summary type="html">Alembic is a starting point for [Jekyll](https://jekyllrb.com/) projects. Rather than starting from scratch, this boilerplate is designed to get the ball rolling immediately. Install it, configure it, tweak it, push it.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/default-social-image.png" /><media:content medium="image" url="http://localhost:4000/assets/default-social-image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">ELEMENTS</title><link href="http://localhost:4000/guide/2021/12/01/elements/" rel="alternate" type="text/html" title="ELEMENTS" /><published>2021-12-01T00:00:00+09:00</published><updated>2021-12-01T00:00:00+09:00</updated><id>http://localhost:4000/guide/2021/12/01/elements</id><content type="html" xml:base="http://localhost:4000/guide/2021/12/01/elements/">&lt;h1 id=&quot;heading-1&quot;&gt;Heading 1&lt;/h1&gt;

&lt;h2 id=&quot;heading-2&quot;&gt;Heading 2&lt;/h2&gt;

&lt;h3 id=&quot;heading-3&quot;&gt;Heading 3&lt;/h3&gt;

&lt;h4 id=&quot;heading-4&quot;&gt;Heading 4&lt;/h4&gt;

&lt;h5 id=&quot;heading-5&quot;&gt;Heading 5&lt;/h5&gt;

&lt;h6 id=&quot;heading-6&quot;&gt;Heading 6&lt;/h6&gt;

&lt;p&gt;&lt;small&gt;A small element&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://david.darn.es&quot; title=&quot;A link&quot;&gt;A link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adip* isicing elit, sed do eiusmod *tempor incididunt ut labore et dolore magna aliqua.&lt;/p&gt;

&lt;p&gt;Duis aute irure dolor in &lt;a href=&quot;https://david.darn.es&quot; title=&quot;A link&quot;&gt;A link&lt;/a&gt; reprehenderit in voluptate velit esse cillum &lt;strong&gt;bold text&lt;/strong&gt; dolore eu fugiat nulla pariatur. Excepteur span element sint occaecat cupidatat non proident, sunt &lt;em&gt;italicised text&lt;/em&gt; in culpa qui officia deserunt mollit anim id &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some code&lt;/code&gt; est laborum.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An item&lt;/li&gt;
  &lt;li&gt;An item&lt;/li&gt;
  &lt;li&gt;An item&lt;/li&gt;
  &lt;li&gt;An item&lt;/li&gt;
  &lt;li&gt;An item&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Item one&lt;/li&gt;
  &lt;li&gt;Item two&lt;/li&gt;
  &lt;li&gt;Item three&lt;/li&gt;
  &lt;li&gt;Item four&lt;/li&gt;
  &lt;li&gt;Item five&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;A simple blockquote&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some HTML…&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;blockquote&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cite=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.imdb.com/title/tt0284978/quotes/qt1375101&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;You planning a vacation, Mr. Sullivan?&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.imdb.com/title/tt0284978/quotes/qt1375101&quot;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Sunways Security Guard&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/blockquote&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…CSS…&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;blockquote&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;blockquote&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;footer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.8rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…and JavaScript&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blockquote&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;blockquote&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bolden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;blockquote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bolden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Mr. Sullivan&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blockquote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Single line of code&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;html-includes&quot;&gt;HTML Includes&lt;/h2&gt;

&lt;h3 id=&quot;contact-form&quot;&gt;Contact form&lt;/h3&gt;

&lt;form class=&quot;form  form--contact&quot; method=&quot;post&quot; name=&quot;Contact&quot; action=&quot;/thanks/&quot;&gt;
  &lt;fieldset class=&quot;fieldset  form__fieldset&quot;&gt;
    &lt;legend class=&quot;legend form__legend&quot;&gt;Contact&lt;/legend&gt;
    &lt;label class=&quot;label&quot; for=&quot;name--contact&quot;&gt;Name: &lt;span class=&quot;required&quot;&gt;*&lt;/span&gt;&lt;/label&gt;
    &lt;input class=&quot;input&quot; id=&quot;name--contact&quot; type=&quot;text&quot; name=&quot;name&quot; value=&quot;&quot; placeholder=&quot;Your Name&quot; required=&quot;required&quot; /&gt;

    &lt;label class=&quot;label&quot; for=&quot;email--contact&quot;&gt;Email Address: &lt;span class=&quot;required&quot;&gt;*&lt;/span&gt;&lt;/label&gt;
    &lt;input class=&quot;input&quot; id=&quot;email--contact&quot; type=&quot;email&quot; name=&quot;email&quot; value=&quot;&quot; placeholder=&quot;email@website.com&quot; required=&quot;required&quot; /&gt;

    &lt;label class=&quot;label&quot; for=&quot;message--contact&quot;&gt;Message: &lt;span class=&quot;required&quot;&gt;*&lt;/span&gt;&lt;/label&gt;
    &lt;textarea class=&quot;textarea&quot; id=&quot;message--contact&quot; name=&quot;message&quot; placeholder=&quot;Your message...&quot; required=&quot;required&quot;&gt;&lt;/textarea&gt;

    &lt;input class=&quot;button&quot; type=&quot;submit&quot; value=&quot;Send message&quot; /&gt;
    &lt;br /&gt;
    &lt;small class=&quot;small&quot;&gt;&lt;span class=&quot;required&quot;&gt;*&lt;/span&gt; indicates a required field&lt;/small&gt;

    
      &lt;input type=&quot;text&quot; name=&quot;_gotcha&quot; style=&quot;display:none&quot; /&gt;
      &lt;input type=&quot;hidden&quot; name=&quot;_subject&quot; value=&quot;JINJEONIMUM submission from Contact&quot; /&gt;
      &lt;input type=&quot;hidden&quot; name=&quot;_next&quot; value=&quot;/thanks/&quot; /&gt;
    
  &lt;/fieldset&gt;
&lt;/form&gt;

&lt;script&gt;
    var email = &quot;moc.liamg@10gnoynan&quot;;
    var unraveledEmail = email.split(&quot;&quot;).reverse().join(&quot;&quot;);
    var form = document.querySelector(&quot;.form--contact&quot;);
      form.setAttribute(&quot;action&quot;, &quot;https://formspree.io/&quot; + unraveledEmail);
  &lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to use the form.&lt;/noscript&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% include site-form.html %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;demo-map-embed&quot;&gt;Demo map embed&lt;/h3&gt;

&lt;div class=&quot;map&quot;&gt;&lt;iframe src=&quot;https://www.google.com/maps/d/u/0/embed?mid=1UT-2Z-Vg_MG_TrS5X2p8SthsJhc&quot; title=&quot;Coffee shop map&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% include map.html id=&quot;XXXXXX&quot; title=&quot;Coffee shop map&quot; %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;button-include&quot;&gt;Button include&lt;/h3&gt;

&lt;p&gt;&lt;a class=&quot;button&quot; href=&quot;https://david.darn.es&quot;&gt;A button&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;button&quot; href=&quot;https://twitter.com/daviddarnes&quot;&gt;A button with icon  &lt;svg width=&quot;16&quot; height=&quot;16&quot; class=&quot;icon  icon--twitter&quot; role=&quot;img&quot; alt=&quot;twitter&quot;&gt;&lt;title&gt;twitter&lt;/title&gt;&lt;use xlink:href=&quot;#twitter&quot; fill=&quot;CurrentColor&quot;&gt;&lt;/use&gt;&lt;/svg&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% include button.html text=&quot;A button&quot; link=&quot;https://david.darn.es&quot; %}
{% include button.html text=&quot;A button with icon&quot;
link=&quot;https://twitter.com/daviddarnes&quot; icon=&quot;twitter&quot; %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;icon-include&quot;&gt;Icon include&lt;/h3&gt;

&lt;svg width=&quot;16&quot; height=&quot;16&quot; class=&quot;icon  icon--twitter&quot; role=&quot;img&quot; alt=&quot;twitter&quot;&gt;&lt;title&gt;twitter&lt;/title&gt;&lt;use xlink:href=&quot;#twitter&quot; fill=&quot;CurrentColor&quot;&gt;&lt;/use&gt;&lt;/svg&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/daviddarnes&quot;&gt;&lt;svg width=&quot;16&quot; height=&quot;16&quot; class=&quot;icon  icon--linkedin&quot; role=&quot;img&quot; alt=&quot;twitter&quot;&gt;&lt;title&gt;twitter&lt;/title&gt;&lt;use xlink:href=&quot;#linkedin&quot; fill=&quot;CurrentColor&quot;&gt;&lt;/use&gt;&lt;/svg&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% include icon.html id=&quot;twitter&quot; title=&quot;twitter&quot; %} [{% include
icon.html id=&quot;linkedin&quot; title=&quot;twitter&quot;
%}](https://www.linkedin.com/in/daviddarnes)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;video-include&quot;&gt;Video include&lt;/h3&gt;

&lt;div class=&quot;video&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube.com/embed/zrkcGL5H3MU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; title=&quot;Siteleaf tutorial video&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% include video.html id=&quot;zrkcGL5H3MU&quot; title=&quot;Siteleaf tutorial video&quot;
%}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;image-includes&quot;&gt;Image includes&lt;/h3&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;https://picsum.photos/600/800?image=894&quot; alt=&quot;Image with caption&quot; width=&quot;300&quot; height=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;caption&quot;&gt;Image with caption&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;figure  figure--right&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;https://picsum.photos/600/800?image=894&quot; alt=&quot;Right aligned image&quot; width=&quot;300&quot; height=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;caption&quot;&gt;Right aligned image&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;figure  figure--left&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;https://picsum.photos/600/800?image=894&quot; alt=&quot;Left aligned image&quot; width=&quot;300&quot; height=&quot;800&quot; /&gt;
  &lt;figcaption class=&quot;caption&quot;&gt;Left aligned image&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;https://picsum.photos/1600/800?image=894&quot; alt=&quot;Image with just alt text&quot; width=&quot;&quot; height=&quot;&quot; /&gt;
  
&lt;/figure&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% include figure.html image=&quot;https://picsum.photos/600/800?image=894&quot;
caption=&quot;Image with caption&quot; width=&quot;300&quot; height=&quot;800&quot; %} {% include figure.html
image=&quot;https://picsum.photos/600/800?image=894&quot; caption=&quot;Right aligned image&quot;
position=&quot;right&quot; width=&quot;300&quot; height=&quot;800&quot; %} {% include figure.html
image=&quot;https://picsum.photos/600/800?image=894&quot; caption=&quot;Left aligned image&quot;
position=&quot;left&quot; width=&quot;300&quot; height=&quot;800&quot; %} {% include figure.html
image=&quot;https://picsum.photos/1600/800?image=894&quot; alt=&quot;Image with just alt text&quot;
%}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>JinJeon</name></author><category term="GUIDE" /><summary type="html">MARKDOWN AND HTML</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/default-social-image.png" /><media:content medium="image" url="http://localhost:4000/assets/default-social-image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>